AWSTemplateFormatVersion: 2010-09-09
Description: Orion shared CICD CDK bootstrap

Parameters:
  Qualifier:
    Description: An identifier to distinguish multiple bootstrap stacks in the same environment
    Default: orion-cicd
    Type: String
    # cdk-(qualifier)-image-publishing-role-(account)-(region) needs to be <= 64 chars
    # account = 12, region <= 14, 10 chars for qualifier and 28 for rest of role name
    AllowedPattern: "[A-Za-z0-9_-]{1,10}"
    ConstraintDescription: Qualifier must be an alphanumeric identifier of at most 10 characters

Resources:
  ### CDK Specific Resources ###
  AssetsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Action:
              - kms:CancelKeyDeletion
              - kms:Create*
              - kms:Delete*
              - kms:Describe*
              - kms:Disable*
              - kms:Enable*
              - kms:GenerateDataKey
              - kms:Get*
              - kms:List*
              - kms:Put*
              - kms:Revoke*
              - kms:ScheduleKeyDeletion
              - kms:Update*
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Effect: Allow
            Principal:
              AWS: "*"
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Ref: AWS::AccountId
                kms:ViaService:
                  - Fn::Sub: s3.${AWS::Region}.amazonaws.com
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: ${FilePublishingRole.Arn}
            Resource: "*"

  AssetsEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        Fn::Sub: alias/cdk-${Qualifier}-assets-key
      TargetKeyId:
        Ref: AssetsEncryptionKey

  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID:
                Fn::Sub: ${AssetsEncryptionKey.Arn}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  StagingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: { Ref: StagingBucket }
      PolicyDocument:
        Id: AccessControl
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Action: s3:*
            Resource:
              - { "Fn::Sub": "${StagingBucket.Arn}" }
              - { "Fn::Sub": "${StagingBucket.Arn}/*" }
            Condition:
              Bool: { "aws:SecureTransport": false }
            Principal: "*"

  FilePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
      RoleName:
        Fn::Sub: cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}

  FilePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject*
            Resource:
              - Fn::Sub: ${StagingBucket.Arn}
              - Fn::Sub: ${StagingBucket.Arn}/*
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              Fn::Sub: ${AssetsEncryptionKey.Arn}
        Version: 2012-10-17
      Roles:
        - Ref: FilePublishingRole
      PolicyName:
        Fn::Sub: cdk-${Qualifier}-file-publishing-role-default-policy-${AWS::AccountId}-${AWS::Region}

  DeploymentActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/CDKToolkit/*
                  - Fn::Sub: arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/orion-*
                  - Fn::Sub: arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/*
              - Effect: Allow
                Action:
                  # Permissions needed by the CLI when doing `cdk deploy`.
                  # Our CI/CD does not need DeleteStack,
                  # but we also want to use this role from the CLI,
                  # and there you can call `cdk destroy`
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateTerminationProtection
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/orion-*
              - Effect: Allow
                Action:
                  - s3:Abort*
                  - s3:DeleteObject*
                  - s3:GetBucket*
                  - s3:GetObject*
                  - s3:List*
                  - s3:PutObject*
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:s3:::cdk-*
                  - Fn::Sub: arn:${AWS::Partition}:s3:::cdk-*/*
                  - Fn::Sub: arn:${AWS::Partition}:s3:::orion-*
                  - Fn::Sub: arn:${AWS::Partition}:s3:::orion-*/*
              - Effect: Allow
                Action:
                  # Necessary to write to the cross-region artifact replication bucket
                  # https://aws.amazon.com/premiumsupport/knowledge-center/codepipeline-deploy-cloudformation/.
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                Resource: "*"
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  Fn::Sub: ${CloudFormationExecutionRole.Arn}
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: "*"
              - Sid: ReadSSM
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CdkBootstrapVersion}
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Orion/*
            Version: 2012-10-17
          PolicyName:
            Fn::Sub: ${Qualifier}-deploy-role-default-policy-${AWS::AccountId}-${AWS::Region}
      RoleName:
        Fn::Sub: cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CdkBootstrapVersion}
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Orion/*
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
              - Resource:
                  - Fn::Sub: arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/orion-*
                Effect: Allow
                Action:
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/orion-*
                  - Fn::Sub: arn:${AWS::Partition}:iam::*:role/orion-*
              - Resource: "*"
                Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
              - Resource:
                  - Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:role/orion-cicd-*
                  - Fn::Sub: arn:${AWS::Partition}:iam::*:role/cdk-*
                Effect: Allow
                Action:
                  - iam:PassRole
              - Resource:
                  - Fn::Sub: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
                Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:EnableKeyRotation
                  - kms:GetKeyPolicy
                  - kms:GetKeyRotationStatus
                  - kms:ListResourceTags
                  - kms:PutKeyPolicy
                  - kms:ScheduleKeyDeletion
                  - kms:TagResource
                  - kms:UntagResource
              - Resource: "*"
                Effect: Allow
                Action:
                  - kms:CreateKey
              - Resource:
                  - Fn::Sub: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/codepipeline-*
                  - Fn::Sub: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
                Effect: Allow
                Action:
                  - kms:CreateAlias
                  - kms:DeleteAlias
              - Resource:
                  - Fn::Sub: arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/*
                Effect: Allow
                Action:
                  - codebuild:BatchGetProjects
                  - codebuild:CreateProject
                  - codebuild:DeleteProject
                  - codebuild:UpdateProject
              - Resource:
                  - Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:orion-*
                Effect: Allow
                Action:
                  - codepipeline:CreatePipeline
                  - codepipeline:DeletePipeline
                  - codepipeline:GetPipeline
                  - codepipeline:GetPipelineState
                  - codepipeline:StartPipelineExecution
                  - codepipeline:UpdatePipeline
              - Resource:
                  - Fn::Sub: arn:${AWS::Partition}:s3:::orion-*
                Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucketPolicy
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:PutBucketPublicAccessBlock
                  - s3:PutEncryptionConfiguration
          PolicyName: default

  ### Orion CICD Specific Resources ###
  ArtifactsDomain:
    Type: AWS::CodeArtifact::Domain
    Properties:
      DomainName: orion
      EncryptionKey:
        Fn::Sub: ${AssetsEncryptionKey.Arn}

  ArtifactsRepository:
    Type: AWS::CodeArtifact::Repository
    Properties:
      RepositoryName: orion-commons
      DomainName:
        Fn::GetAtt: ArtifactsDomain.Name
      ExternalConnections:
        - public:pypi

  ArtifactsCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: Allow
                Action:
                  - codeartifact:DescribeDomain
                  - codeartifact:GetAuthorizationToken
                  - codeartifact:ListRepositoriesInDomain
                Resource:
                  - Ref: ArtifactsDomain
              - Effect: Allow
                Action:
                  - codeartifact:GetRepositoryEndpoint
                  - codeartifact:ReadFromRepository
                Resource:
                  - Ref: ArtifactsRepository
              - Effect: Allow
                Action:
                  - codeartifact:PublishPackageVersion
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - sts:GetServiceBearerToken
                Resource:
                  - "*"
                Condition:
                  StringEquals:
                    sts:AWSServiceName: codeartifact.amazonaws.com
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - Fn::Sub: ${StagingBucket.Arn}/*
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - Fn::Sub: ${AssetsEncryptionKey.Arn}
          PolicyName:
            Fn::Sub: ${Qualifier}-ca-cb-default-policy-${AWS::AccountId}-${AWS::Region}

  ArtifactsCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:orion-commons
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:ListBucket*
                  - s3:Put*
                Resource:
                  - Fn::Sub: ${StagingBucket.Arn}
                  - Fn::Sub: ${StagingBucket.Arn}/*
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Describe*
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:List*
                  - kms:ReEncrypt*
                Resource:
                  - Fn::Sub: ${AssetsEncryptionKey.Arn}
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - Fn::Sub: ${ArtifactsCodeBuildProject.Arn}
          PolicyName:
            Fn::Sub: ${Qualifier}-ca-cp-default-policy-${AWS::AccountId}-${AWS::Region}

  ArtifactsEventRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${ArtifactsCodePipeline}
          PolicyName:
            Fn::Sub: ${Qualifier}-ca-rule-default-policy-${AWS::AccountId}-${AWS::Region}

  ArtifactsCodeCommitTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - Fn::Sub: arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:orion-commons
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      State: ENABLED
      Targets:
        - Arn:
            Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${ArtifactsCodePipeline}
          Id:
            Fn::Sub: ${Qualifier}-ca-rule-${AWS::AccountId}-${AWS::Region}
          RoleArn:
            Fn::Sub: ${ArtifactsEventRuleRole.Arn}

  ArtifactsCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      EncryptionKey:
        Fn::Sub: ${AssetsEncryptionKey.Arn}
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DOMAIN
            Type: PLAINTEXT
            Value:
              Fn::Sub: ${ArtifactsDomain.Name}
          - Name: OWNER
            Value:
              Fn::Sub: ${AWS::AccountId}
          - Name: REPOSITORY
            Type: PLAINTEXT
            Value:
              Fn::Sub: ${ArtifactsRepository.Name}
      ServiceRole:
        Fn::Sub: ${ArtifactsCodeBuildRole.Arn}
      TimeoutInMinutes: 30
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.7
            pre_build:
              commands:
                - pip install wheel twine
                - pip install -U -r requirements.txt
                - python setup.py bdist_wheel
                - export VERSION=$(python setup.py --version)
                - export PACKAGE=$(python setup.py --name) 
                - aws codeartifact login --tool twine --domain ${DOMAIN} --domain-owner ${OWNER} --repository ${REPOSITORY}
            build:
              commands:
                - twine upload --repository codeartifact dist/${PACKAGE}-${VERSION}-py3-none-any.whl

  ArtifactsCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: orion-cicd-commons-pipeline
      RoleArn:
        Fn::Sub: ${ArtifactsCodePipelineRole.Arn}
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: Source1
              Configuration:
                RepositoryName: orion-commons
                BranchName: main
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: Source1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              OutputArtifacts:
                - Name: Build1
              Configuration:
                ProjectName:
                  Ref: ArtifactsCodeBuildProject
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location:
          Ref: StagingBucket
        EncryptionKey:
          Id:
            Fn::Sub: ${AssetsEncryptionKey.Arn}
          Type: KMS

  ContainmentScoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - codepipeline:GetPipelineState
                  - codepipeline:RetryStageExecution
                Effect: Allow
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:orion-*
          PolicyName:
            Fn::Sub: ${Qualifier}-containment-score-default-policy-${AWS::AccountId}-${AWS::Region}

  ContainmentScoreRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggered when any Orion CodePipeline fails
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Stage Execution State Change
        detail:
          state:
            - FAILED
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt: ContainmentScoreFunction.Arn
          Id:
            Fn::Sub: ${Qualifier}-pipeline-failure

  ContainmentScoreRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ContainmentScoreFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ContainmentScoreRule
          - Arn

  # Some AWS Accounts, particularly new ones, have a low containment score. It means that
  # no more than 1 CodeBuild project can run concurrently. The below Lambda function restarts
  # any CB stage that fails for that specific reason. It can be deleted if the containment score
  # is high enough in the account.
  ContainmentScoreFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Restart failed pipeline stage when CB containment score is reached
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt: ContainmentScoreRole.Arn
      Runtime: python3.8
      Timeout: 120
      Code:
        ZipFile: |
          import logging
          from typing import Any, Dict, List, Optional

          import boto3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          logging.basicConfig(
              format="%(levelname)s %(threadName)s [%(filename)s:%(lineno)d] %(message)s",
              datefmt="%Y-%m-%d:%H:%M:%S",
              level=logging.INFO,
          )

          try:
              logger.info("Container initialization completed")
          except Exception as e:
              logger.error(e, exc_info=True)
              init_failed = e


          def lambda_handler(event: Dict[str, Any], context: Optional[Dict[str, Any]]) -> int:
              """Restart failed pipeline stage when CB containment score is reached.

              Args:
                  event (Dict[str, Any]): CodePipeline stage change event
                  context (Optional[Dict[str, Any]]): Context object containing Lambda metadata

              Returns:
                  int: 200 success code
              """
              cp_client = boto3.client("codepipeline")

              pipeline: str = event["detail"]["pipeline"]
              stage: str = event["detail"]["stage"]
              execution_id: str = event["detail"]["execution-id"]

              logger.info(
                  f"Inspecting Failed {execution_id} for {pipeline} pipeline in {stage} stage"
              )
              response: Dict[str, Any] = cp_client.get_pipeline_state(name=pipeline)
              stage_states: List[Dict[str, Any]] = list(
                  filter(lambda d: d["stageName"] in [stage], response["stageStates"])
              )

              error_message = "Error calling startBuild: Cannot have more than"
              if stage_states:
                  failed_action_states: List[Dict[str, Any]] = list(
                      filter(
                          lambda d: d["latestExecution"]["status"] in ["Failed"],
                          stage_states[0]["actionStates"],
                      )
                  )
                  if failed_action_states:
                      failed_cb_quota: List[Dict[str, Any]] = list(
                          filter(
                              lambda d: d["latestExecution"]["errorDetails"][
                                  "message"
                              ].startswith(error_message),
                              failed_action_states,
                          )
                      )
                      if failed_cb_quota:
                          try:
                              logger.info("Rerunning stage due to CodeBuild containment score...")
                              response = cp_client.retry_stage_execution(
                                  pipelineName=pipeline,
                                  stageName=stage,
                                  pipelineExecutionId=execution_id,
                                  retryMode="FAILED_ACTIONS",
                              )
                              return 200
                          except cp_client.exceptions.StageNotRetryableException:
                              logger.info("Stage already running. Skipping...")

              logger.info("No action required. Skipping...")
              return 200

  ### SSM Parameters ###
  AssetsEncryptionKeyArn:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: The ARN of the KMS key used to encrypt the assets
      Name: /Orion/KMS/CICDAssetsEncryptionKeyArn
      Value:
        Fn::Sub: ${AssetsEncryptionKey.Arn}
  CdkBootstrapVersion:
    # The SSM parameter is used in pipeline-deployed templates to verify the version
    # of the bootstrap resources.
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub: /cdk-bootstrap/${Qualifier}/version
      Value: "5"
  ArtifactsDomainArn:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: The ARN of the CodeArtifact domain
      Name: /Orion/CodeArtifact/DomainArn
      Value:
        Ref: ArtifactsDomain
  ArtifactsRepositoryArn:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Description: The ARN of the CodeArtifact repository
      Name: /Orion/CodeArtifact/RepositoryArn
      Value:
        Ref: ArtifactsRepository

Outputs:
  BucketName:
    Description: The name of the S3 bucket owned by the CDK toolkit stack
    Value:
      Fn::Sub: ${StagingBucket}
  BucketDomainName:
    Description: The domain name of the S3 bucket owned by the CDK toolkit stack
    Value:
      Fn::Sub: ${StagingBucket.RegionalDomainName}
  # The Output is used by the CLI to verify the version of the bootstrap resources.
  BootstrapVersion:
    Description:
      The version of the bootstrap resources that are currently mastered
      in this stack
    Value:
      Fn::GetAtt: [CdkBootstrapVersion, Value]
