AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Contains StageB StateMachine Definition"

Parameters:
  pArtifactBucket:
    Description: "Name of the artifactory bucket"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/S3/ArtifactsBucket"
  pDatasetBucket:
    Description: "The dataset bucket"
    Type: String
  pStageBucket:
    Description: "The stage bucket"
    Type: String
  pApp:
    Description: "Name of the application (all lowercase, no symbols or spaces)"
    Type: String
    AllowedPattern: '[a-z0-9]*'
  pOrg:
    Description: "Name of the organization (all lowercase, no symbols or spaces)"
    Type: String
    AllowedPattern: '[a-z0-9]*'
  pTeamName:
    Description: "Name of the team owning the pipeline (all lowercase, no symbols or spaces)"
    Type: String
    AllowedPattern: '[a-z0-9]*'
  pPipeline:
    Description: "The name of the pipeline (all lowercase, no symbols or spaces)"
    Type: String
    AllowedPattern: '[a-z0-9]*'
  pEnv:
    Description: "The name of the environment to deploy the dataset to"
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "test", "prod"]
  pDatalakeLibLayer:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "The ARN of the latest Datalake Library Lambda Layer"
  pPipLibLayer:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "The ARN of the latest Pip Library Lambda Layer"
  pWrangler37LibLayer:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "The ARN of the latest AWS Data Wrangler 3.7 Library Lambda Layer"
  pElasticSearchEnabled:
    Description: "Boolean for wether ElasticSearch is enabled"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/ElasticSearch/Enabled"
  pUpdateSubscriptionLambda:
    Description: "ARN of the Lambda function used by the Custom Resource to update CloudWatch subscription filters"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/Lambda/UpdateCloudWatchSubscriptionFilterFunctionArn"
  pKibanaFunction:
    Description: "ARN of the Lambda function that collates logs"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/Lambda/KibanaLambdaArn"

Conditions:
  DeployElasticSearch: !Equals [ !Ref pElasticSearchEnabled, "true" ]

Globals:
  Function:
      Runtime: python3.7
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref pDatalakeLibLayer
      KmsKeyArn: !Sub '{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId:1}}'

Resources:
  ######## IAM #########
  # Common policy
  rLambdaCommonPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-common-b"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*"
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*"
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:PutItem
            Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*"
          - Effect: "Allow"
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource:
              - !Sub '{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId:1}}'

  # Routing Step Role
  rRoleLambdaExecutionRoutingStep:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-routing-b-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-routing-b-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - states:StartExecution
              Resource:
              - !Ref rStateMachine
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:DeleteMessageBatch
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
                - sqs:ListQueues
                - sqs:ListDeadLetterSourceQueues
                - sqs:ListQueueTags
                - sqs:ReceiveMessage
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*"

  # Step1 Role
  rRoleLambdaExecutionStep1:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-process-b-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-process-b-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
              - !Sub "arn:aws:s3:::${pDatasetBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
              - !Sub "arn:aws:s3:::${pDatasetBucket}/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/pre-stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/post-stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/analytics/${pTeamName}/*"
            - Effect: Allow
              Action:
                - glue:GetJobRun
                - glue:StartJobRun
                - glue:GetCrawler
                - glue:UpdateCrawler
              Resource: "*"
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/sdlf-ats*"

  # Step2 Role
  

  # Step3 Role
  rRoleLambdaExecutionStep3:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-postupdate-b-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-postupdate-b-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
              - !Sub "arn:aws:s3:::${pDatasetBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
              - !Sub "arn:aws:s3:::${pDatasetBucket}/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/pre-stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/post-stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/analytics/${pTeamName}/*"
            - Effect: Allow
              Action:
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
                - sqs:ListQueues
                - sqs:ListDeadLetterSourceQueues
                - sqs:ListQueueTags
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*"

  # Error Handling Lambda Role
  rRoleLambdaExecutionErrorStep:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-error-b-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-error-b-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:DeleteMessageBatch
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
                - sqs:ListQueues
                - sqs:ListDeadLetterSourceQueues
                - sqs:ListQueueTags
                - sqs:ReceiveMessage
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*"

  ######## LAMBDA FUNCTIONS #########
  rLambdaRoutingStep:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./lambda/stage-b-routing/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "routing-b"]]
      Description: "Checks if items are to be processed and route them to state machine"
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionRoutingStep.Arn

  rLambdaRedriveStep:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/stage-b-redrive/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "redrive-b"]]
      Environment:
        Variables:
          TEAM: !Ref pTeamName
          PIPELINE: !Ref pPipeline
          STAGE: "StageB"
      Description: "Redrives Failed messages to the routing queue"
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionRoutingStep.Arn

  rLambdaStep1:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./lambda/stage-b-process-data/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "process-b"]]
      Description: "Processing pipeline"
      MemorySize: 1536
      Layers:
        - !Ref pWrangler37LibLayer
      Timeout: 900
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn

  rLambdaJobCheckStep:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./lambda/stage-b-check-job/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "checkjob-b"]]
      Description: "Checks if job has finished (success/failure)"
      MemorySize: 256
      Layers:
        - !Ref pWrangler37LibLayer
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn

  

  rLambdaStep3:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./lambda/stage-b-postupdate-metadata/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "postupdate-b"]]
      Description: "Post-Update the metadata in the DynamoDB Catalog table"
      MemorySize: 512
      Timeout: 600
      Role: !GetAtt rRoleLambdaExecutionStep3.Arn

  rLambdaErrorStep:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/stage-b-error/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "error-b"]]
      Description: "Fallback lambda to handle messages which failed processing"
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionErrorStep.Arn

  ######## CLOUDWATCH #########
  rLambdaRoutingStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaRoutingStep}"
  rUpdateSubscriptionFilterRoutingStep:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaRoutingStepLogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"
  rLambdaRoutingStepCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "routing-b"]]
      AlarmDescription: !Sub "StageB ${pTeamName} ${pPipeline} Routing Lambda Alarm"
      AlarmActions:
        - !Sub '{{resolve:ssm:/SDLF/SNS/${pTeamName}/Notifications:1}}'
      MetricName: Errors
      EvaluationPeriods: 5
      Period: 300
      ComparisonOperator: GreaterThanThreshold
      Namespace: AWS/Lambda
      Statistic: Sum
      Threshold: 1
      Unit: Count
      Dimensions:
        - Name: FunctionName
          Value: !Ref rLambdaRoutingStep

  rLambdaRedriveStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaRedriveStep}"
  rUpdateSubscriptionFilterRedriveStep:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaRedriveStepLogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaStep1LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaStep1}"
  rUpdateSubscriptionFilterStep1:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaStep1LogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaJobCheckStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaJobCheckStep}"
  rUpdateSubscriptionFilterCrawlerCheckStep:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaJobCheckStepLogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"




  rLambdaStep3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaStep3}"
  rUpdateSubscriptionFilterStep3:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaStep3LogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaErrorStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaErrorStep}"
  rUpdateSubscriptionFilterErrorStep:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaErrorStepLogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"
  rLambdaErrorStepCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "error-b"]]
      AlarmDescription: !Sub "StageB ${pTeamName} ${pPipeline} Error Lambda Alarm"
      AlarmActions:
        - !Sub '{{resolve:ssm:/SDLF/SNS/${pTeamName}/Notifications:1}}'
      MetricName: Invocations
      EvaluationPeriods: 5
      Period: 300
      ComparisonOperator: GreaterThanThreshold
      Namespace: AWS/Lambda
      Statistic: Sum
      Threshold: 1
      Unit: Count
      Dimensions:
        - Name: FunctionName
          Value: !Ref rLambdaErrorStep

  rStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "sm-b"]]
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Simple pseudo flow",
              "StartAt": "Try",
              "States": {
                "Try": {
                  "Type": "Parallel",
                  "Branches": [
                    {
                      "StartAt": "Process Data",
                      "States":{
                        "Process Data": {
                          "Type": "Task",
                          "Resource": "${lStep1}",
                          "Comment": "Process Data",
                          "ResultPath": "$.body.job",
                          "Next": "Wait"
                        },
                        "Wait": {
                            "Type": "Wait",
                            "Seconds": 15,
                            "Next": "Get Job status"
                        },
                        "Get Job status": {
                            "Type": "Task",
                            "Resource": "${lCheckJob}",
                            "ResultPath": "$.body.job",
                            "Next": "Did Job finish?"
                        },
                        "Did Job finish?": {
                            "Type": "Choice",
                            "Choices": [{
                                "Variable": "$.body.job.jobDetails.jobStatus",
                                "StringEquals": "SUCCEEDED",
                                "Next": "Post-update Comprehensive Catalogue"
                            },{
                                "Variable": "$.body.job.jobDetails.jobStatus",
                                "StringEquals": "FAILED",
                                "Next": "Job Failed"
                            }],
                            "Default": "Wait"
                        },
                          "Job Failed": {
                          "Type": "Fail",
                          "Error": "Job Failed",
                          "Cause": "Job failed, please check the logs"
                        },
                        "Post-update Comprehensive Catalogue": {
                          "Type": "Task",
                          "Resource": "${lStep3}",
                          "Comment": "Post-update Comprehensive Catalogue",
                          "ResultPath": "$.statusCode",
                          "Next": "Data Quality"
                        },
                        "Data Quality": {
                          "Type":"Task",
                          "Resource":"arn:aws:states:::states:startExecution",
                          "Parameters":{
                              "StateMachineArn":"${smDataQuality}",
                              "Input": {"body.$": "$.body"}
                          },
                          "Retry":[  
                            {  
                                "ErrorEquals":[  
                                  "StepFunctions.ExecutionLimitExceeded"
                                ]
                            }
                          ],
                          "Comment": "Data Quality",
                          "End": true
                        }
                      }
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": null,
                      "Next": "Error"
                    }
                  ],
                  "Next": "Done"
                },
                "Done": {
                  "Type": "Succeed"
                },
                "Error": {
                  "Type": "Task",
                  "Resource": "${lError}",
                  "Comment": "Send Original Payload to DLQ",
                  "Next": "Failed"
                },
                "Failed": {
                  "Type": "Fail"
                }
              }
            }
          - {
              lStep1: !GetAtt rLambdaStep1.Arn,
              lStep3: !GetAtt rLambdaStep3.Arn,
              lCheckJob: !GetAtt rLambdaJobCheckStep.Arn,
              lError: !GetAtt rLambdaErrorStep.Arn,
              smDataQuality: '{{resolve:ssm:/SDLF/SM/DataQualityStateMachine:1}}'
            }
      RoleArn: !Sub '{{resolve:ssm:/SDLF/IAM/${pTeamName}/StatesExecutionRoleArn:1}}'

  ######## SSM OUTPUTS #########
  rStateMachineSsm:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/SDLF/SM/${pTeamName}/${pPipeline}StageBSM"
      Type: "String"
      Value: !Ref rStateMachine
      Description: !Sub "ARN of the StageB ${pTeamName} ${pPipeline} State Machine"

  ######## AVOID CRAWLER TEST ######