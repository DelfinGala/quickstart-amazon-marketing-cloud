AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Contains StageA StateMachine Definition"

Parameters:
  pArtifactsBucket:
    Description: "S3 Artifacts bucket"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/S3/ArtifactsBucket"
  pDatasetBucket:
    Description: "The dataset bucket"
    Type: String
  pStageBucket:
    Description: "The stage bucket"
    Type: String
  pApp:
    Description: "Name of the application (all lowercase, no symbols or spaces)"
    Type: String
    AllowedPattern: '[a-z0-9]*'
  pOrg:
    Description: "Name of the organization (all lowercase, no symbols or spaces)"
    Type: String
    AllowedPattern: '[a-z0-9]*'
  pTeamName:
    Description: "Name of the team owning the pipeline (all lowercase, no symbols or spaces)"
    Type: String
    AllowedPattern: '[a-z0-9]*'
  pPipeline:
    Description: "The name of the pipeline (all lowercase, no symbols or spaces)"
    Type: String
    AllowedPattern: '[a-z0-9]*'
  pEnv:
    Description: "The name of the environment to deploy the pipeline to"
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "test", "prod"]
  pDatalakeLibLayer:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "The ARN of the latest Datalake Library Lambda Layer"
  pPipLibLayer:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "The ARN of the latest Pip Library Lambda Layer"
  pWrangler37LibLayer:
    Type: "AWS::SSM::Parameter::Value<String>"
    Description: "The ARN of the latest AWS Data Wrangler 3.7 Library Lambda Layer"
  pElasticSearchEnabled:
    Description: "Boolean for wether ElasticSearch is enabled"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/ElasticSearch/Enabled"
  pUpdateSubscriptionLambda:
    Description: "ARN of the Lambda function used by the Custom Resource to update CloudWatch subscription filters"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/Lambda/UpdateCloudWatchSubscriptionFilterFunctionArn"
  pKibanaFunction:
    Description: "ARN of the Lambda function that collates logs"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/Lambda/KibanaLambdaArn"

Conditions:
  DeployElasticSearch: !Equals [ !Ref pElasticSearchEnabled, "true" ]

Globals:
  Function:
      Runtime: python3.7
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref pDatalakeLibLayer
      KmsKeyArn: !Sub '{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId:1}}'

Resources:
  ######## SQS #########
  rQueueRoutingStep:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "queue-a.fifo"]]
      FifoQueue: True
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt rDeadLetterQueueRoutingStep.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 60
      KmsMasterKeyId: !Sub '{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId:1}}'
  rDeadLetterQueueRoutingStep:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "dlq-a.fifo"]]
      FifoQueue: True
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      KmsMasterKeyId: !Sub '{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId:1}}'
  rQueueLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !GetAtt rQueueRoutingStep.Arn
      FunctionName: !GetAtt rLambdaRoutingStep.Arn

  ######## IAM #########
  rLambdaCommonPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-common-a-${AWS::Region}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*"
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*"
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:PutItem
            Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*"
          - Effect: "Allow"
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource:
              - !Sub '{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId:1}}'

  # Routing Role
  rRoleLambdaExecutionRoutingStep:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-routing-a-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-routing-a-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - states:StartExecution
              Resource:
              - !Ref rStateMachine
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:DeleteMessageBatch
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
                - sqs:ListQueues
                - sqs:ListDeadLetterSourceQueues
                - sqs:ListQueueTags
                - sqs:ReceiveMessage
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource:
                - !GetAtt rQueueRoutingStep.Arn
                - !GetAtt rDeadLetterQueueRoutingStep.Arn

  # Step1 Role
  rRoleLambdaExecutionStep1:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-preupdate-a-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-preupdate-a-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
              - !Sub "arn:aws:s3:::${pStageBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
              - !Sub "arn:aws:s3:::${pStageBucket}/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/pre-stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/post-stage/${pTeamName}/*"

  # Step2 Role
  rRoleLambdaExecutionStep2:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-process-a-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-process-a-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:GetBucketVersioning
                - s3:ListBucket
              Resource:
              - !Sub arn:aws:s3:::${pDatasetBucket}
              - !Sub arn:aws:s3:::${pStageBucket}
              - !Sub arn:aws:s3:::${pArtifactsBucket}
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
              - !Sub "arn:aws:s3:::${pDatasetBucket}/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pDatasetBucket}/raw/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/pre-stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/post-stage/${pTeamName}/*"
            - Effect: "Allow"
              Action:
                - kms:DescribeKey
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:CreateGrant
              Resource:
                - !Sub '{{resolve:ssm:/SDLF/KMS/${pTeamName}/DataKeyId:1}}'

  rLambdaExecutionStep2RoleArnSsm:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/SDLF/IAM/${pTeamName}/${pPipeline}/LambdaExecutionStep2RoleArn"
      Type: "String"
      Value: !GetAtt rRoleLambdaExecutionStep2.Arn
      Description: "The ARN of the role used by Lambda Step 2 Execution"

  # Step3 Role
  rRoleLambdaExecutionStep3:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-postupdate-a-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-postupdate-a-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
                - sqs:ListQueues
                - sqs:ListDeadLetterSourceQueues
                - sqs:ListQueueTags
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*"
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
              - !Sub "arn:aws:s3:::${pStageBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
              - !Sub "arn:aws:s3:::${pStageBucket}/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/pre-stage/${pTeamName}/*"
              - !Sub "arn:aws:s3:::${pStageBucket}/post-stage/${pTeamName}/*"

  # Error Handling Lambda Role
  rRoleLambdaExecutionErrorStep:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pTeamName}-${pPipeline}-error-a-${AWS::Region}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/state-machine/"
      Policies:
        - PolicyName: !Sub "sdlf-${pTeamName}-${pPipeline}-error-a-${AWS::Region}"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:DeleteMessageBatch
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
                - sqs:ListQueues
                - sqs:ListDeadLetterSourceQueues
                - sqs:ListQueueTags
                - sqs:ReceiveMessage
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource:
                - !GetAtt rDeadLetterQueueRoutingStep.Arn

  ######## LAMBDA FUNCTIONS #########
  rLambdaRoutingStep:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/stage-a-routing/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "routing-a"]]
      Description: "Routes S3 PutObject Logs to the relevant StageA State Machine"
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecutionRoutingStep.Arn

  rLambdaRedriveStep:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/stage-a-redrive/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "redrive-a"]]
      Environment:
        Variables:
          TEAM: !Ref pTeamName
          PIPELINE: !Ref pPipeline
          STAGE: "StageA"
      Description: "Redrives Failed S3 PutObject Logs to the routing queue"
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionRoutingStep.Arn

  rLambdaStep1:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/stage-a-preupdate-metadata/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "preupdate-a"]]
      Description: "Pre-Update the metadata in the DynamoDB Catalog table"
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn

  rLambdaStep2:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/stage-a-process-object/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "process-a"]]
      Description: "Processing pipeline"
      Layers:
        - !Ref pWrangler37LibLayer
      MemorySize: 1536
      Timeout: 600
      Role: !Sub '{{resolve:ssm:/SDLF/IAM/DataLakeAdminRoleArn:1}}'

  rLambdaStep3:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/stage-a-postupdate-metadata/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "postupdate-a"]]
      Description: "Post-Update the metadata in the DynamoDB Catalog table"
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionStep3.Arn

  rLambdaErrorStep:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./lambda/stage-a-error/src
      FunctionName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "error-a"]]
      Description: "Fallback lambda to handle messages which failed processing"
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionErrorStep.Arn

  ######## CLOUDWATCH #########
  rLambdaRoutingStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaRoutingStep}"
  rUpdateSubscriptionFilterRoutingStep:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaRoutingStepLogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"
  rLambdaRoutingStepCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "routing-a"]]
      AlarmDescription: !Sub "StageA ${pTeamName} ${pPipeline} Routing Lambda Alarm"
      AlarmActions:
        - !Sub '{{resolve:ssm:/SDLF/SNS/${pTeamName}/Notifications:1}}'
      MetricName: Errors
      EvaluationPeriods: 5
      Period: 60
      ComparisonOperator: GreaterThanThreshold
      Namespace: AWS/Lambda
      Statistic: Sum
      Threshold: 5
      Unit: Count
      Dimensions:
        - Name: FunctionName
          Value: !Ref rLambdaRoutingStep

  rLambdaRedriveStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaRedriveStep}"
  rUpdateSubscriptionFilterRedriveStep:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaRedriveStepLogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaStep1LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaStep1}"
  rUpdateSubscriptionFilterStep1:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaStep1LogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaStep2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaStep2}"
  rUpdateSubscriptionFilterStep2:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaStep2LogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaStep3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaStep3}"
  rUpdateSubscriptionFilterStep3:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaStep3LogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaErrorStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${rLambdaErrorStep}"
  rUpdateSubscriptionFilterErrorStep:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaErrorStepLogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"
  rLambdaErrorStepCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "error-a"]]
      AlarmDescription: !Sub "StageA ${pTeamName} ${pPipeline} Error Lambda Alarm"
      AlarmActions:
        - !Sub '{{resolve:ssm:/SDLF/SNS/${pTeamName}/Notifications:1}}'
      MetricName: Invocations
      EvaluationPeriods: 5
      Period: 60
      ComparisonOperator: GreaterThanThreshold
      Namespace: AWS/Lambda
      Statistic: Sum
      Threshold: 5
      Unit: Count
      Dimensions:
        - Name: FunctionName
          Value: !Ref rLambdaErrorStep

  ######## STATE MACHINE #########
  rStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Join ['-', ["sdlf", !Ref pTeamName, !Ref pPipeline, "sm-a"]]
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Simple pseudo flow",
              "StartAt": "Try",
              "States": {
                "Try": {
                  "Type": "Parallel",
                  "Branches": [
                    {
                      "StartAt": "Pre-update Comprehensive Catalogue",
                      "States":{
                        "Pre-update Comprehensive Catalogue": {
                          "Type": "Task",
                          "Resource": "${lStep1}",
                          "Comment": "Pre-update Comprehensive Catalogue",
                          "Next": "Execute Light Transformation"
                        },
                        "Execute Light Transformation": {
                          "Type": "Task",
                          "Resource": "${lStep2}",
                          "Comment": "Execute Light Transformation",
                          "ResultPath": "$.body.processedKeys",
                          "Next": "Post-update comprehensive Catalogue"
                        },
                        "Post-update comprehensive Catalogue": {
                          "Type": "Task",
                          "Resource": "${lStep3}",
                          "Comment": "Post-update comprehensive Catalogue",
                          "ResultPath": "$.statusCode",
                          "End": true
                        }
                      }
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": null,
                      "Next": "Error"
                    }
                  ],
                  "Next": "Done"
                },
                "Done": {
                  "Type": "Succeed"
                },
                "Error": {
                  "Type": "Task",
                  "Resource": "${lError}",
                  "Comment": "Send Original Payload to DLQ",
                  "Next": "Failed"
                },
                "Failed": {
                  "Type": "Fail"
                }
              }
            }
          - {
              lStep1: !GetAtt rLambdaStep1.Arn,
              lStep2: !GetAtt rLambdaStep2.Arn,
              lStep3: !GetAtt rLambdaStep3.Arn,
              lError: !GetAtt rLambdaErrorStep.Arn
            }
      RoleArn: !Sub '{{resolve:ssm:/SDLF/IAM/${pTeamName}/StatesExecutionRoleArn:1}}'

  ######## SSM OUTPUTS #########
  rQueueRoutingStepSsm:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/SDLF/SQS/${pTeamName}/${pPipeline}StageAQueue"
      Type: "String"
      Value: !Select [ "5", !Split [":", !GetAtt rQueueRoutingStep.Arn]]
      Description: !Sub "Name of the StageA ${pTeamName} ${pPipeline} Queue"

  rDeadLetterQueueRoutingStepSsm:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/SDLF/SQS/${pTeamName}/${pPipeline}StageADLQ"
      Type: "String"
      Value: !Select [ "5", !Split [":", !GetAtt rDeadLetterQueueRoutingStep.Arn]]
      Description: !Sub "Name of the StageA ${pTeamName} ${pPipeline} DLQ"

  rStateMachineSsm:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/SDLF/SM/${pTeamName}/${pPipeline}StageASM"
      Type: "String"
      Value: !Ref rStateMachine
      Description: !Sub "ARN of the StageA ${pTeamName} ${pPipeline} State Machine"