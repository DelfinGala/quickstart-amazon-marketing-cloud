AWSTemplateFormatVersion: '2010-09-09'
Description: Amazon Marketing Cloud Quick Start Cleanup  (qs-xxxxxxxx)
Metadata:
  cfn-lint: { config: { ignore_checks: [] } }
Parameters:
  Bucket:
    Description: The Bucket required for the custom resource to function.
    Type: String
  ServiceToken:
    Description: The Role ARN required to run the Custom Resource.
    Type: String
Resources:
  UpdateConfig:
    Type: Custom::AMCCleanup
    Properties:
      ServiceToken: !GetAtt AMCCleanupFunction.Arn
      Region: !Ref AWS::Region
      Bucket: !Ref Bucket
  AMCCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Removes non-versioned files from an S3 Bucket.
      Handler: index.handler
      Runtime: python3.9
      Role: !Ref ServiceToken
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import botocore
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def emptyBucket(bucket):
              s3 = boto3.resource('s3', config=boto3.session.Config(signature_version='s3v4'))
              bucket_resource = s3.Bucket(bucket)
              logger.info("\n[INFO]: Working on bucket [" + str(bucket) + "]")
              bucket_resource = s3.Bucket(bucket)
              logger.info("[INFO]: Getting and deleting all object versions")
              try:
                object_versions = bucket_resource.object_versions.all()
                for object_version in object_versions:
                  object_version.delete()
                  logger.info("Deleted [" + str(bucket) + "]")
              except botocore.exceptions.ClientError as e:
                if e.response['Error']['Code'] == 'AccessDenied':
                  logger.info("[WARNING]: Unable to delete object versions. (AccessDenied)")
                if e.response['Error']['Code'] == 'NoSuchBucket':
                  logger.info("[WARNING]: Unable to get versions. (NoSuchBucket)")
                else:
                  logger.error(e)

          def deleteRole(role_name):
              client = boto3.client('iam')
              resource = boto3.resource('iam')
              role = resource.Role(name=role_name)
              try:
                # Get the Managed Policies and then detatch them
                  for policy in role.attached_policies.all():
                      logger.info(f"Removing Managed Policy from {role.name}")
                      role.detach_policy(PolicyArn=policy.arn)

                # Get the Instance Profiles and detatch them
                  for profile in role.instance_profiles.all():
                      logger.info(f"Removing role from InstanceProfile {profile.name}")
                      profile.remove_role(RoleName=role.name)

                # Get the Inline Policies and then delete them
                  for role_policy in role.policies.all():
                      logger.info(f"Deleting Policy {role_policy.name}")
                      role_policy.delete()

                  role.delete()
                  logger.info(f"{role.name} deleted\n")
              except Exception as e:
                  logger.error(e)

          def getBucketLocation(client, bucket_name):
              response = client.get_bucket_location(Bucket=bucket_name)
              if response['LocationConstraint'] == None: 
                return "us-east-1"
              return response['LocationConstraint']

          def create(properties, physical_id):
              message = 'Create Complete'
              print(message)
              return cfnresponse.SUCCESS, None

          def update(properties, physical_id):
              return create(properties, physical_id)

          def delete(properties, physical_id):

              client = boto3.client('s3') 
              accountid = boto3.client('sts').get_caller_identity().get('Account')
              region_name = client.meta.region_name
              logger.info("Empty static AMC buckets only from region" + region_name)

              # delete roles and their policies
              # deleteRole('sdlf-cicd-codebuild-" + region_name) 
                  
              # empty static regionname-accountid buckets
              bucket_suffix = ["-analytics","-artifactory","-athena","-cloudtrail","-dataquality","-raw","-stage"]
              for bucket_suffix_name in bucket_suffix:
                  emptyBucket("demoorg-demodl-dev-" + region_name + "-" + accountid + bucket_suffix_name)

              emptyBucket("sdlf-cfn-artifacts-" + region_name + "-" + accountid)
                  
              # empty buckets with dynamic amc-testdemocustomer- names
              s3_client = boto3.client('s3')
              response = s3_client.list_buckets()
              
              for bucket in response['Buckets']:
                  bucket_name = str(bucket["Name"])
                  bucket_region = getBucketLocation(s3_client,bucket_name)
                  if bucket_region == region_name and (bucket_name.startswith("amc-testdemocustomer-")):
                      emptyBucket(bucket_name)
                      logger.info("Empty dynamic AMC bucket " + bucket_name + " from region " + region_name)  
                      
              return cfnresponse.SUCCESS, physical_id

          def handler(event, context):
              logger.info("Received event: %s" % json.dumps(event))
              status = cfnresponse.FAILED
              new_physical_id = None
          try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')
              status, new_physical_id = {
              'Create': create,
              'Update': update,
              'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)

          except Exception as e:
              logger.error("Exception: %s" % e)
              status = cfnresponse.FAILED
          finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)
