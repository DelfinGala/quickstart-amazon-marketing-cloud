AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Lambda resources to manage a team"
Parameters:
  pMicroserviceName:
    Type: String
  pTeamName:
    Type: String
  pPipelineName:
    Type: String
  pEnvironment:
    Type: String
  pPowerToolsLibLayer:
    Type: String
  # pTenantLambdaIamRole:
  #   Type: String
  # pDynamoDBTenantStream:
  #   Type: String
  # pTenantTableNameSSM:
  #   Type: String
  pCustomerConfigSNSTopic:
    Type: String
  # pLambdaTenantConfigDynamoDBTriggerRole:
  #   Type: String
  pDynamoDBCustomerConfigStream:
    Type: String
  pRoleLambdaCustomerConfigDynamoDBTrigger:
    Type: String
  # pTenantConfigSNSTopic:
  #   Type: String
  pStateMachineSsm:
    Type: String
  pSQSQueue:
    Type: String
  pRoleLambdaAMCInstanceStateMachine:
    Type: String
#  pApiGatewayApi:
#    Type: String
Globals:
  Function:
      Runtime: python3.7
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref pPowerToolsLibLayer
Resources:
  ######## Tenant Lambda Functions ############
  
  ######## LAMBDA FUNCTION #########
  # rTenantConfigDynamoDBTriggerLambda:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     CodeUri: ./../lambda/TenantConfigDynamoDBTrigger/src
  #     Description: An Amazon DynamoDB trigger that pushes the updates made to the Tenant config table to an SNS topic
  #     FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "TenantConfigDynamoDBTrigger", !Ref pEnvironment]]
  #     MemorySize: 128
  #     Timeout: 30
  #     Policies: []
  #     Environment:
  #       Variables:
  #         SNS_TOPIC_ARN: !Ref pTenantConfigSNSTopic
  #     Role: !Ref pLambdaTenantConfigDynamoDBTriggerRole
  #     Events:
  #       DynamoDB1:
  #         Type: DynamoDB
  #         Properties:
  #           Stream: !Ref pDynamoDBTenantStream
  #           StartingPosition: TRIM_HORIZON
  #           BatchSize: 100

  rCustomerConfigDynamoDBTriggerLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./../lambda/CustomerConfigDynamoDBTrigger/src
      Description: An Amazon DynamoDB trigger that pushes the updates made to the customer config table to an SNS topic
      FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "CustomerConfigDynamoDBTrigger", !Ref pEnvironment]]
      MemorySize: 2048
      Timeout: 900
      Policies: []
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref pCustomerConfigSNSTopic
      Role: !Ref pRoleLambdaCustomerConfigDynamoDBTrigger
      Events:
        DynamoDB1:
          Type: DynamoDB
          Properties:
            Stream: !Ref pDynamoDBCustomerConfigStream
            StartingPosition: TRIM_HORIZON
            BatchSize: 100


  ####### API Gateway #######
  # rApiGatewayApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     Name: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "TenantConfig", !Ref pEnvironment]]
  #     StageName: !Ref pEnvironment
  #     Variables:
  #       Stack: !Ref pEnvironment
  # ######## LAMBDA FUNCTION #########
  # rAddTenantConfigLambda:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     CodeUri: ./../lambda/AddTenant/src
  #     Description: An Amazon API Lambda function updates made to a table.
  #     FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "AddTenant", !Ref pEnvironment]]
  #     MemorySize: 128
  #     Timeout: 3
  #     Policies: []
  #     Role: !Ref pTenantLambdaIamRole
  #     Environment:
  #       Variables:
  #         TENANT_DYNAMODB_TABLE: !Ref pTenantTableNameSSM
  #     Events:
  #       TenantApiEvent:
  #         Type: Api
  #         Properties:
  #           Path: /v1/tenant
  #           Method: post
  #           RestApiId: !Ref rApiGatewayApi
  ######## LAMBDA FUNCTION #########
  # rUpdateTenantConfigLambda:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     CodeUri: ./../lambda/UpdateTenant/src
  #     Description: An Amazon API Lambda function updates made to a table.
  #     FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "UpdateTenant", !Ref pEnvironment]]
  #     MemorySize: 128
  #     Timeout: 3
  #     Policies: []
  #     Role: !Ref pTenantLambdaIamRole
  #     Environment:
  #       Variables:
  #         TENANT_DYNAMODB_TABLE: !Ref pTenantTableNameSSM
  #     Events:
  #       TenantApiEvent:
  #         Type: Api
  #         Properties:
  #           Path: /v1/tenant
  #           Method: put
  #           RestApiId: !Ref rApiGatewayApi
  # ######## LAMBDA FUNCTION #########
  # rDeleteTenantConfigLambda:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     CodeUri: ./../lambda/DeleteTenant/src
  #     Description: An Amazon API Lambda function updates made to a table.
  #     FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "DeleteTenant", !Ref pEnvironment]]
  #     MemorySize: 128
  #     Timeout: 3
  #     Policies: []
  #     Role: !Ref pTenantLambdaIamRole
  #     Environment:
  #       Variables:
  #         TENANT_DYNAMODB_TABLE: !Ref pTenantTableNameSSM
  #     Events:
  #       TenantApiEvent:
  #         Type: Api
  #         Properties:
  #           Path: /v1/tenant
  #           Method: delete
  #           RestApiId: !Ref rApiGatewayApi
  # ######## LAMBDA FUNCTION #########
  # rGetTenantConfigLambda:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     CodeUri: ./../lambda/GetTenant/src
  #     Description: An Amazon API Lambda function to get tenant info from table.
  #     FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "GetTenant", !Ref pEnvironment]]
  #     MemorySize: 128
  #     Timeout: 3
  #     Policies: []
  #     Role: !Ref pTenantLambdaIamRole
  #     Environment:
  #       Variables:
  #         TENANT_DYNAMODB_TABLE: !Ref pTenantTableNameSSM
  #     Events:
  #       TenantApiEvent:
  #         Type: Api
  #         Properties:
  #           Path: /v1/tenant
  #           Method: get
  #           RestApiId: !Ref rApiGatewayApi

  rLambdaAMCInstanceSetup:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./../lambda/TriggerAMCInstanceSetup/src
      FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "TriggerAMCSetupStepFunction", !Ref pEnvironment]]
      Description: "Trigger AMC Instance setup state machine"
      MemorySize: 128
      Timeout: 30
      Role: !Ref pRoleLambdaAMCInstanceStateMachine
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Join ['', ["{{resolve:ssm:", !Ref pStateMachineSsm,":1}}"]]

  rQueueLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !Ref pSQSQueue
      FunctionName: !GetAtt rLambdaAMCInstanceSetup.Arn
# Outputs:
  # oLambdaAddTenantConfig:
  #   Description: "Arn of the Add Tenant Lambda function"
  #   Value: !GetAtt rAddTenantConfigLambda.Arn
  # oLambdaUpdateTenantConfig:
  #   Description: "Arn of the Update Tenant Lambda function"
  #   Value: !GetAtt rUpdateTenantConfigLambda.Arn
  # oLambdaDeleteTenantConfig:
  #   Description: "Arn of the Delete Tenant Lambda function"
  #   Value: !GetAtt rDeleteTenantConfigLambda.Arn
  # oLambdaTenantConfigDynamoDBTrigger:
  #   Description: "ARN of the Tenant Config  Trigger Lambda function"
  #   Value: !GetAtt rTenantConfigDynamoDBTriggerLambda.Arn
  