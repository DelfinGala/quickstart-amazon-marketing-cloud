AWSTemplateFormatVersion: "2010-09-09"
Description: "IAM resources to manage a team"
Parameters:
  pMicroserviceName:
    Type: String
  pTeamName:
    Type: String
  pPipelineName:
    Type: String
  pEnvironment:
    Type: String
  # pTenantTable:
  #   Type: String
  # pTenantTableNameSSM:
  #   Type: String
  pCustomerConfigSNSTopic:
    Type: String
  pCustomerConfigTableName:
    Type: String
  # pTenantConfigSNSTopic:
  #   Type: String
  pKMSKeyId:
    Type: String

Resources:

### IAM Policy DecryptSNSSQSKey ###
  rPolicyKMSSNSIntegrationKeyAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows using the SNSSQS KMS Key for Decryption"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  !Sub "${AWS::Region}", "KMS", "DecryptSNSIntegrationQueue", ]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "kms:Decrypt"
              - "kms:DescribeKey"
              - "kms:GenerateDataKey"
            Resource:
              - !Ref pKMSKeyId

  # rRoleLambdaTenantConfig:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Description:
  #       Fn::Sub: 'Allows DynamoDB access to Lambda functions
  #         for ${pMicroserviceName} ${pTeamName}'
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: lambda.amazonaws.com
  #         Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #     - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
  #     Policies:
  #     - PolicyName:
  #         Fn::Join:
  #         - '-'
  #         - - Ref: pMicroserviceName
  #           - Ref: pTeamName
  #           - Ref: pPipelineName
  #           - TenantConfig
  #           - DynamoDB
  #           - Write
  #           - Policy
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - dynamodb:PutItem
  #           - dynamodb:UpdateItem
  #           - dynamodb:DeleteItem
  #           - dynamodb:Query
  #           Resource:
  #           - Fn::Sub: arn:aws:dynamodb:*:*:table/${pTenantTable}
  #           - Fn::Sub: arn:aws:dynamodb:*:*:table/${pTenantTable}/*
  #         - Effect: Allow
  #           Action:
  #           - ssm:GetParameter
  #           Resource:
  #           - Fn::Sub: arn:aws:ssm:*:*:parameter${pTenantTableNameSSM}


  # rRoleLambdaTenantConfigDynamoDBTrigger:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     Description: !Sub "Allows Full S3, SQS, and State machine full access to Lambda functions for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: "sts:AssumeRole"
  #     ManagedPolicyArns:
  #       - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  #       - !Ref rPolicyKMSSNSIntegrationKeyAccess
  #     Policies:
  #       - PolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, "TenantConfigDynamoDBTrigger", "DynamoDB", "AMCWorkflows", "Read"]]
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - "dynamodb:ListTables"
  #                 - "dynamodb:ListGlobalTables"
  #                 - "dynamodb:Query"
  #                 - "dynamodb:Scan"
  #                 - "dynamodb:GetRecords"
  #                 - "dynamodb:GetShardIterator"
  #                 - "dynamodb:DescribeStream"
  #                 - "dynamodb:ListStreams"
  #               Resource:
  #                 - !Sub "arn:aws:dynamodb:*:*:table/${pTenantTable}"
  #                 - !Sub "arn:aws:dynamodb:*:*:table/${pTenantTable}/*"
  #       - PolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "TenantConfigDynamoDBTrigger", "SNS", "Publish"]]
  #         PolicyDocument: 
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - "sns:Publish"
  #               Resource:
  #                 - !Ref pTenantConfigSNSTopic
  #     Tags:
  #       -
  #         Key: 'tagging-policy'
  #         Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]


  rRoleLambdaCustomerConfigDynamoDBTrigger:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Allows Full S3, SQS, and State machine full access to Lambda functions for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyKMSSNSIntegrationKeyAccess
      Policies:
        - PolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, "CustomerConfigDynamoDBTrigger", "DynamoDB", "AMCWorkflows", "Read"]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:ListTables"
                  - "dynamodb:ListGlobalTables"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:ListStreams"
                Resource:
                  - !Sub "arn:aws:dynamodb:*:*:table/${pCustomerConfigTableName}"
                  - !Sub "arn:aws:dynamodb:*:*:table/${pCustomerConfigTableName}/*"
                  - !Sub "arn:aws:dynamodb:*:*:table/wfm-*"
                  - !Sub "arn:aws:dynamodb:*:*:table/tps-*"
                  - !Sub "arn:aws:dynamodb:*:*:table/sas-*"
        - PolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "CustomerConfigDynamoDBTrigger", "SNS", "Publish"]]
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  - !Ref pCustomerConfigSNSTopic
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]

  rPolicyDecryptSNSSQSKey:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description:
        Fn::Sub: Allows using the SNSSQS KMS Key for Decryption
      ManagedPolicyName:
        Fn::Join:
        - '-'
        - - Ref: pMicroserviceName
          - Ref: pTeamName
          - Ref: pEnvironment
          - !Sub "${AWS::Region}"
          - Common
          - KMS
          - DecryptSNSSQS
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - kms:Decrypt
          - kms:DescribeKey
          Resource:
          - !Ref pKMSKeyId
### State machines Full Access ###
  rSMAMCStartExecution:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows Full access to the ${pMicroserviceName} ${pTeamName} ${pEnvironment} State Machines"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pEnvironment, !Sub "${AWS::Region}", "SM", "StartExecution"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "states:StartExecution"
            Resource:
              - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${pMicroserviceName}-${pTeamName}-*"
  rRoleLambdaAMCInstanceStateMachine:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Allows Full SQS, and State machine full access to Lambda functions for ${pMicroserviceName} ${pTeamName} ${pPipelineName} ${pEnvironment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref rPolicyDecryptSNSSQSKey
        - !Ref rSMAMCStartExecution
      Policies:
        - PolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, "AMCInstanceSetupSQS", "FullAccess"]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:List*"
                  - "sqs:ReceiveMessage"
                  - "sqs:SendMessage*"
                  - "sqs:DeleteMessage*"
                  - "sqs:GetQueue*"
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${pMicroserviceName}-${pTeamName}-${pEnvironment}-*"
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*"
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, "common"]]
Outputs:
  # oLambdaTenantRole:
  #   Description: "Arn of the Tenant Lambda IAM Role"
  #   Value: !GetAtt rRoleLambdaTenantConfig.Arn
  # oLambdaTenantConfigDynamoDBTriggerRole:
  #   Description: "Arn of the TenantConfigDynamoDBTrigger IAM Role"
  #   Value: !GetAtt rRoleLambdaTenantConfigDynamoDBTrigger.Arn
  oRoleLambdaCustomerConfigDynamoDBTrigger:
    Description: "ARN of the Customer Config Trigger IAM Role"
    Value: !GetAtt rRoleLambdaCustomerConfigDynamoDBTrigger.Arn
  oRoleLambdaAMCInstanceStateMachine:
    Description: "ARN of the AMC Instance Setup State Machine Lambda IAM Role"
    Value: !GetAtt rRoleLambdaAMCInstanceStateMachine.Arn