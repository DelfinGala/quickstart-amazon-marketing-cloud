AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Lambda resources to manage a team"

Parameters:
  pMicroserviceName:
    Type: String
  pTeamName:
    Type: String
  pPipeline:
    Type: String
  pEnvironment:
    Type: String
  pPowerToolsLibLayer:
    Type: String
  pArtifactBucket:
    Description: "Name of the artifactory bucket"
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/SDLF/S3/CFNBucket"
  pDatalakeLibLayer:
    # Type: "AWS::SSM::Parameter::Value<String>"
    Type: String
    Description: "The ARN of the latest Datalake Library Lambda Layer"
    # Default: "/SDLF/Lambda/ats/LatestDatalakeLibraryLayer"
  pKMSKeyId:
    Type: String
  pCustomerConfigSNSTopic:
    Type: String
  # pCustomerConfigKmsArn:
  #   Type: "AWS::SSM::Parameter::Value<String>"
  #   Description: "The ARN of the latest Datalake Library Lambda Layer"
  #   Default: "/SDLF/KMS/ats/InfraKeyId"
  # pSNSSQSKeyDDSIntegrationAlias:
  #   Type: String
  #   Description: "The ARN of the SQS SNS common KMS Key"
  #   Default: "alias/sdlf-tps-kms-sqs-sns-dds-integration-key"

Globals:
  Function:
      Runtime: python3.7
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref pPowerToolsLibLayer

Resources:
### Create Common Policy
  rLambdaCommonPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${pMicroserviceName}-${pPipeline}-${AWS::Region}-common-amc-initialize"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${pMicroserviceName}-*"
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:PutParameter
              - ssm:DeleteParameter
              - ssm:AddTagsToResource
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*"
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:PutItem
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pMicroserviceName}-*"
          - Effect: "Allow"
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
            Resource:
              - !Ref pKMSKeyId
          - Effect: "Allow"
            Action:
              - SNS:GetTopicAttributes
              - SNS:CreateTopic
              - sns:ListTopics
              - sns:SetTopicAttributes
              - sns:DeleteTopic
            Resource:
              - !Ref pCustomerConfigSNSTopic


### Create rRoleLambdaExecutionStep1
  rRoleLambdaExecutionStep1:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${pMicroserviceName}-${pPipeline}-${AWS::Region}-amc-onboarding"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${pMicroserviceName}-${pPipeline}-amc-onboarding"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
              - !Sub "arn:aws:s3:::${pArtifactBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
              - !Sub "arn:aws:s3:::${pArtifactBucket}/${pMicroserviceName}/*"
            - Effect: Allow
              Action:
                - s3:DeleteBucket
              Resource:
                - !Sub "arn:aws:s3:::amc*"
            - Effect: Allow
              Action:
                - s3:CreateBucket
                - s3:PutBucketPolicy
                - s3:PutBucketAcl
                - s3:PutBucketPublicAccessBlock
                - s3:PutAccountPublicAccessBlock
                - s3:GetAccountPublicAccessBlock
                - s3:GetBucketPublicAccessBlock
                - s3:PutBucketEncryption
                - s3:PutBucketNotification
                - s3:PutBucketNotificationConfiguration
                - s3:PutBucketTagging
                - s3:SetBucketEncryption
                - s3:GetBucketAcl
                - s3:GetBucketNotification
                - s3:GetBucketEncryption
                - s3:GetEncryptionConfiguration
                - s3:PutEncryptionConfiguration
                - s3:GetBucketPolicy
                - s3:GetBucketPolicyStatus
                - s3:DeleteBucketPolicy
              Resource: "*"
            - Resource:
                - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-*
                - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${pMicroserviceName}-*
                - !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/*
              Effect: Allow
              Action:
                - cloudformation:CreateChangeSet
                - cloudformation:CreateStack
                - cloudformation:DeleteChangeSet
                - cloudformation:DeleteStack
                - cloudformation:DescribeChangeSet
                - cloudformation:DescribeStacks
                - cloudformation:ExecuteChangeSet
                - cloudformation:SetStackPolicy
                - cloudformation:UpdateStack
            - Resource: "*"
              Effect: Allow
              Action:
                - cloudformation:GetTemplate
                - cloudformation:GetTemplateSummary
                - cloudformation:ListStacks
                - cloudformation:ValidateTemplate
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/${pMicroserviceName}s*"
            - Resource:
              - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
              - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/*"
              Effect: Allow
              Action:
                - kms:TagResource
                - kms:CreateAlias
                - kms:UpdateAlias
                - kms:DescribeKey
                - kms:PutKeyPolicy
                - kms:ScheduleKeyDeletion
            - Resource: "*"
              Effect: Allow
              Action:
                - kms:CreateKey

### Create rRoleLambdaExecutionStep2###
  rRoleLambdaExecutionStep2:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${pMicroserviceName}-${pPipeline}-${AWS::Region}-amc-postdeploy-metadata"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${pMicroserviceName}-${pPipeline}-amc-postdeploy-metadata"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
              - !Sub "arn:aws:s3:::${pArtifactBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
              - !Sub "arn:aws:s3:::${pArtifactBucket}/${pMicroserviceName}/*"
            - Effect: Allow
              Action:
                - s3:CreateBucket
                - s3:PutBucketPolicy
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:CreateBucket
                - s3:PutBucketPolicy
              Resource: "*"
            - Resource:
                - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-*
                - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${pMicroserviceName}-*
                - !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/*
              Effect: Allow
              Action:
                - cloudformation:CreateChangeSet
                - cloudformation:CreateStack
                - cloudformation:DeleteChangeSet
                - cloudformation:DeleteStack
                - cloudformation:DescribeChangeSet
                - cloudformation:DescribeStacks
                - cloudformation:ExecuteChangeSet
                - cloudformation:SetStackPolicy
                - cloudformation:UpdateStack
            - Resource: "*"
              Effect: Allow
              Action:
                - cloudformation:GetTemplate
                - cloudformation:GetTemplateSummary
                - cloudformation:ListStacks
                - cloudformation:ValidateTemplate
            - Resource: 
                - !Ref pKMSKeyId
                - !Sub '{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}'
              Effect: Allow
              Action:
                - kms:DescribeKey
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:CreateGrant*
            - Effect: Allow
              Action:
                - dynamodb:BatchGetItem
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:GetRecords
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchWriteItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:PutItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sdlf-*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/wfm-*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/tps-*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sas-*"
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/${pMicroserviceName}*"
  
  ### Create StateMachineRole###
  rRoleStateMachine:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "sdlf-${pMicroserviceName}-${AWS::Region}-states-execution"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: 'sdlf-tps-states-execution'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-tps-*
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tps*
            - Effect: Allow
              Action:
                - states:DescribeStateMachine
                - states:DescribeStateMachineForExecution
                - states:StartExecution
              Resource:
              - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-data-quality-sm"
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StopExecution
              Resource:
              - !Sub "*"
            - Effect: Allow
              Action:
                - events:DescribeRule
                - events:PutTargets
                - events:PutRule
              Resource:
              - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
  rLambdaStep1:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./../lambda/AddAMCInstance/src
      FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "AddAmcInstance", !Ref pEnvironment]]
      Description: "Onboard AMC into environment"
      MemorySize: 2048
      Timeout: 900
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn
      Environment:
        Variables:
          templateUrl: !Sub "https://${pArtifactBucket}.s3.amazonaws.com/${pMicroserviceName}/scripts/${pPipeline}/amc-initialize.yaml"
          lambdaRoleArn: !GetAtt rRoleLambdaExecutionStep1.Arn

  rLambdaStackCheckStep:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./../lambda/AddAMCInstanceStatusCheck/src
      FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "checkAmcInstanceStatus", !Ref pEnvironment]]
      Description: "Checks if stack has finished (success/failure)"
      MemorySize: 256
      Timeout: 900
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn

  rLambdaStep2:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./../lambda/AddAMCInstancePostDeployMetadata/src
      FunctionName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "postDeployMetadataInstanceConfig", !Ref pEnvironment]]
      Description: "Post-Deploy update the metadata in the DynamoDB Customer Config Catalog table"
      MemorySize: 512
      Timeout: 600
      Environment:
        Variables:
          AccountId: !Sub "${AWS::AccountId}"
          Region: !Sub "${AWS::Region}"
      Role: !GetAtt rRoleLambdaExecutionStep2.Arn
      Layers:
        - !Ref pDatalakeLibLayer

  rStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, "intialize-amc"]]
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Simple pseudo flow",
              "StartAt": "Try",
              "States": {
                "Try": {
                  "Type": "Parallel",
                  "Branches": [
                    {
                      "StartAt": "Process AMC Instance Request",
                      "States":{
                        "Process AMC Instance Request": {
                          "Type": "Task",
                          "Resource": "${lStep1}",
                          "Comment": "Process AMC Instance Request",
                          "ResultPath": "$.body.stackId",
                          "Next": "Wait"
                        },
                        "Wait": {
                            "Type": "Wait",
                            "Seconds": 45,
                            "Next": "Get Stack status"
                        },
                        "Get Stack status": {
                            "Type": "Task",
                            "Resource": "${lCheckStack}",
                            "ResultPath": "$.body.stackStatus",
                            "Next": "Did Job finish?"
                        },
                        "Did Job finish?": {
                            "Type": "Choice",
                            "Choices": [{
                                "Variable": "$.body.stackStatus",
                                "StringEquals": "CREATE_COMPLETE",
                                "Next": "Post-deploy update sdlf config"
                            },{
                                "Variable": "$.body.stackStatus",
                                "StringEquals": "UPDATE_COMPLETE",
                                "Next": "Post-deploy update sdlf config"
                            },{
                                "Variable": "$.body.stackStatus",
                                "StringEquals": "FAILED",
                                "Next": "Stack Failed"
                            }],
                            "Default": "Wait"
                        },
                          "Stack Failed": {
                          "Type": "Fail",
                          "Error": "Stack Failed",
                          "Cause": "Stack failed, please check the logs"
                        },
                        "Post-deploy update sdlf config": {
                          "Type": "Task",
                          "Resource": "${lStep2}",
                          "Comment": "Post-deploy update sdlf config",
                          "ResultPath": "$.statusCode",
                          "End": true
                        }
                      }
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": null,
                      "Next": "Failed"
                    }
                  ],
                  "Next": "Done"
                },
                "Done": {
                  "Type": "Succeed"
                },
                "Failed": {
                  "Type": "Fail"
                }
              }
            }
          - {
              lStep1: !GetAtt rLambdaStep1.Arn,
              lStep2: !GetAtt rLambdaStep2.Arn,
              lCheckStack: !GetAtt rLambdaStackCheckStep.Arn,
            }
      RoleArn: !GetAtt rRoleStateMachine.Arn

  ######## SSM OUTPUTS #########
  rStateMachineSsm:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/SDLF/SM/${pMicroserviceName}/${pPipeline}InitializeAMC"
      Type: "String"
      Value: !Ref rStateMachine
      Description: !Sub "ARN of the Initialize AMC ${pMicroserviceName} ${pPipeline} State Machine"

  #### SNS Topic for AMC Instance onboarding #######
  # rAMCOnboardingSNSTopic:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     KmsMasterKeyId: !Ref pSNSSQSKeyDDSIntegrationAlias
  #     TopicName: !Sub "${pMicroserviceName}-${pTeamName}-S3BucketConsumer-SNSTopic-${pEnvironment}"

  #### SSM Parameter######
  # rSSMSNSTopic:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name:
  #       Fn::Sub: /SDLF/SNS/${pMicroserviceName}/AMCOnboardingS3BucketSNSTopic
  #     Type: String
  #     Value: !Ref rAMCOnboardingSNSTopic
  #     Description:
  #       Fn::Sub: SSM parameter name SNS topic to consume other microservcie

  ######SQS Queue Policy*######
  # Need to update condition to limit bucket
  # rSNSPolicy:
  #   Type: AWS::SNS::TopicPolicy
  #   Properties:
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: 's3.amazonaws.com'
  #           Action:
  #             - sns:Publish
  #           Resource: !Ref rAMCOnboardingSNSTopic
  #           Condition:
  #             StringLike:
  #               aws:SourceArn: !Sub "arn:aws:s3:::amc-*"
  #     Topics:
  #       - !Ref rAMCOnboardingSNSTopic


# For SDLF -add SQS subscription to SNS topic

# For DDS - add SQS subscription to SNS topic


#  #SDLF SQS Subscribe SNS topic
#  rSDLFQueueSNSSubscription:
#    Type: AWS::SNS::Subscription
#    Properties:
#      Endpoint: '{{resolve:ssm:/SDLF/SQS/QueueCatalogArn:2}}'
#      Protocol: "sqs"
#      TopicArn: !Ref rSNSTopic

#  #DDS SQS Subscribe SNS topic
#  rDDSQueueSNSSubscription:
#    Type: AWS::SNS::Subscription
#    Properties:
#      Endpoint: '{{resolve:ssm:/SDLF/DDS/QueueCatalogArn:2}}'
#      Protocol: "sqs"
#      TopicArn: !Ref rSNSTopic
Outputs:

  oStateMachineSsm:
    Description: "SSM for AMC Instance Setup State Machine"
    Value: !Ref rStateMachineSsm
  # oSSMSNSTopic:
  #   Description: "SSM Parameter for AMC Onboarding SNS topic for customer S3 bucket"
  #   Value: !Ref rSSMSNSTopic
  # oSnsTopic:
  #   Description: "Arn of AMC Onboarding SNS topic"
  #   Value: !Ref rAMCOnboardingSNSTopic
  # oSnsTopicName:
  #   Description: "AMC Onboarding SNS topic name"
  #   Value: !GetAtt rAMCOnboardingSNSTopic.TopicName