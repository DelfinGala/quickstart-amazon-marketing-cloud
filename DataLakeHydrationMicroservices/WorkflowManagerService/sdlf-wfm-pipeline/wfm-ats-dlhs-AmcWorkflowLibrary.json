{
  "1": {
    "sqlQuery": {
      "S": "WITH IMP_CLICKSSEG AS  ( SELECT A.ADVERTISER, A.behavior_segment_name AS SEGMENT, SUM(A.total_cost/100000) AS impression_cost, behavior_segment_matched AS MATCHED_SEGMENT, SUM(A.IMPRESSIONS) AS IMPRESSIONS, SUM(B.clicks) as CLICKS, COUNT(DISTINCT A.USER_ID) AS REACH FROM display_impressions_by_user_segments A LEFT JOIN DISPLAY_CLICKS B ON A.request_tag = B.request_tag GROUP BY A.ADVERTISER, A.behavior_segment_name, A.behavior_segment_matched), USR_SEG_IMP as ( select user_id, advertiser_id, behavior_segment_name, behavior_segment_matched, sum(total_cost)/100000 as impression_cost from display_impressions_by_user_segments group by user_id, advertiser_id, behavior_segment_name, behavior_segment_matched ), CONV_SEG AS ( SELECT A.ADVERTISER, A.tracked_asin, B.behavior_segment_name AS SEGMENT, B.behavior_segment_matched AS MATCHED_SEGMENT, SUM(A.CONVERSIONS) AS PURCHASES, sum(A.product_sales) as sales_tracked, sum(A.total_product_sales) as sales_tracked_brand, ROUND(sum(A.total_product_sales)/sum(B.impression_cost),2) as roas_brand, ROUND(sum(A.product_sales)/sum(B.impression_cost),2) as roas_salestracked, SUM(B.impression_cost) AS total_cost_fromconvtable From amazon_attributed_events_by_conversion_time A INNER JOIN USR_SEG_IMP B ON A.USER_ID = B.USER_ID AND A.ADVERTISER_ID = B.ADVERTISER_ID WHERE conversion_event_subtype = 'order' GROUP BY A.ADVERTISER, A.tracked_asin, B.behavior_segment_name, B.behavior_segment_matched ) SELECT A.ADVERTISER, BUILT_IN_PARAMETER('TIME_WINDOW_START') AS time_window_start, BUILT_IN_PARAMETER('TIME_WINDOW_END') AS time_window_end, A.SEGMENT, A.MATCHED_SEGMENT, A.IMPRESSIONS, A.REACH, B.tracked_asin, B.PURCHASES, B.SALES_TRACKED, B.sales_tracked_brand, A.CLICKS, roas_brand, roas_salestracked, A.impression_cost, (B.PURCHASES/A.REACH) as conversion_rate_perc, B.total_cost_fromconvtable FROM IMP_CLICKSSEG A LEFT JOIN CONV_SEG B ON A.ADVERTISER = B.ADVERTISER AND A.SEGMENT = B.SEGMENT AND A.MATCHED_SEGMENT = B.MATCHED_SEGMENT"
    },
    "workflowMetaData": {
      "M": {
        "endemicType": {
          "S": "ENDEMIC"
        },
        "automaticDeployWorkflow": {
          "BOOL": true
        }
      }
    },
    "filteredMetricsDiscriminatorColumn": {
      "S": "filtered"
    },
    "version": {
      "N": "1"
    },
    "workflowType": {
      "S": "ENDEMIC|NON-ENDEMIC"
    },
    "workflowId": {
      "S": "adspsegmt_convROASby_ASIN_clicks"
    },
    "defaultSchedule": {
      "M": {
        "automaticDeploySchedule": {
          "BOOL": true
        },
        "Description": {
          "S": "Runs the pa-adsp-segment-conversion-ROAS-version-1-by-ASIN_withclicks at 11:00 AM EST daily "
        },
        "Input": {
          "M": {
            "payload": {
              "M": {
                "timeWindowEnd": {
                  "S": "today(-1)"
                },
                "timeWindowStart": {
                  "S": "today(-2)"
                },
                "timeWindowType": {
                  "S": "EXPLICIT"
                },
                "workflow_executed_date": {
                  "S": "now()"
                }
              }
            }
          }
        },
        "Name": {
          "S": "adspsegmt_convROASby_ASIN_clicks"
        },
        "ScheduleExpression": {
          "S": "custom(D * 15)"
        },
        "State": {
          "S": "ENABLED"
        }
      }
    }
  },
  "2": {
    "sqlQuery": {
      "S": "WITH user_exposure AS ( SELECT A.user_id, A.campaign,   A.Advertiser, 0 as phone_purch, 0 as tablet_purch, 0 as TV_purch, 0 as PC_purch, 0 as other_purch, 0 as phone_rev, 0 as tablet_rev, 0 as TV_rev, 0 as PC_rev, 0 as other_rev, SUM( CASE WHEN A.device_type = 'Phone' THEN A.impressions ELSE 0 END ) as phone_imp, SUM( CASE WHEN A.device_type = 'Tablet' THEN A.impressions ELSE 0 END ) as tablet_imp, SUM( CASE WHEN A.device_type = 'TV' THEN A.impressions ELSE 0 END ) as TV_imp, SUM( CASE WHEN A.device_type = 'PC' THEN A.impressions ELSE 0 END ) as PC_imp, SUM( CASE WHEN A.device_type != 'PC' AND A.device_type != 'TV' AND A.device_type != 'Phone' AND A.device_type != 'Tablet' THEN A.impressions ELSE 0 END ) as other_imp, SUM( CASE WHEN A.device_type = 'Phone' THEN A.total_cost ELSE 0 END ) as phone_cost, SUM( CASE WHEN A.device_type = 'Tablet' THEN A.total_cost ELSE 0 END ) as tablet_cost, SUM( CASE WHEN A.device_type = 'TV' THEN A.total_cost ELSE 0 END ) as TV_cost, SUM( CASE WHEN A.device_type = 'PC' THEN A.total_cost ELSE 0 END ) as PC_cost, SUM( CASE WHEN A.device_type != 'PC' AND A.device_type != 'TV' AND A.device_type != 'Phone' AND A.device_type != 'Tablet' THEN A.total_cost ELSE 0 END ) as other_cost,0 as phone_clicks, 0 as tablet_clicks, 0 as TV_clicks, 0 as PC_clicks, 0 as other_clicks FROM display_impressions A GROUP BY user_id, campaign, Advertiser UNION ALL SELECT B.user_id, campaign, Advertiser,0 as phone_purch, 0 as tablet_purch, 0 as TV_purch, 0 as PC_purch, 0 as other_purch, 0 as phone_rev, 0 as tablet_rev, 0 as TV_rev, 0 as PC_rev, 0 as other_rev, 0 as phone_imp, 0 as tablet_imp, 0 as TV_imp, 0 as PC_imp, 0 as other_imp, 0 as phone_cost, 0 as tablet_cost, 0 as TV_cost, 0 as PC_cost, 0 as other_cost, SUM( CASE WHEN B.device_type = 'Phone' THEN B.clicks ELSE 0 END ) as phone_clicks, SUM( CASE WHEN B.device_type = 'Tablet' THEN B.clicks ELSE 0 END ) as tablet_clicks, SUM( CASE WHEN B.device_type = 'TV' THEN B.clicks ELSE 0 END ) as TV_clicks, SUM( CASE WHEN B.device_type = 'PC' THEN B.clicks ELSE 0 END ) as PC_clicks, SUM( CASE WHEN B.device_type != 'PC' AND B.device_type != 'TV' AND B.device_type != 'Phone' AND B.device_type != 'Tablet' THEN B.clicks ELSE 0 END ) as other_clicks from DISPLAY_CLICKS B GROUP BY user_id, campaign, Advertiser UNION ALL SELECT user_id, campaign, Advertiser, SUM( CASE WHEN device_type = 'Phone' THEN purchases ELSE 0 END ) as phone_purch, SUM( CASE WHEN device_type = 'Tablet' THEN purchases ELSE 0 END ) as tablet_purch, SUM( CASE WHEN device_type = 'TV' THEN purchases ELSE 0 END ) as TV_purch, SUM( CASE WHEN device_type = 'PC' THEN purchases ELSE 0 END ) as PC_purch, SUM( CASE WHEN device_type != 'PC' AND device_type != 'TV' AND device_type != 'Phone' AND device_type != 'Tablet' THEN purchases ELSE 0 END ) as other_purch, SUM( CASE WHEN device_type = 'Phone' THEN product_sales ELSE 0 END ) as phone_rev, SUM( CASE WHEN device_type = 'Tablet' THEN product_sales ELSE 0 END ) as tablet_rev, SUM( CASE WHEN device_type = 'TV' THEN product_sales ELSE 0 END ) as TV_rev, SUM( CASE WHEN device_type = 'PC' THEN product_sales ELSE 0 END ) as PC_rev, SUM( CASE WHEN device_type != 'PC' AND device_type != 'TV' AND device_type != 'Phone' AND device_type != 'Tablet' THEN product_sales ELSE 0 END ) as other_rev, 0 as phone_imp, 0 as tablet_imp, 0 as TV_imp, 0 as PC_imp, 0 as other_imp, 0 as phone_cost, 0 as tablet_cost, 0 as TV_cost, 0 as PC_cost, 0 as other_cost ,0 as phone_clicks, 0 as tablet_clicks, 0 as TV_clicks, 0 as PC_clicks, 0 as other_clicks FROM amazon_attributed_events_by_traffic_time GROUP BY user_id,campaign,Advertiser), aggregated as ( select user_id, campaign, Advertiser, sum(phone_purch) as phone_purch, sum(tablet_purch) as tablet_purch, sum(TV_purch) as TV_purch, sum(PC_purch) as PC_purch, sum(other_purch) as other_purch, sum(phone_rev) as phone_rev, sum(tablet_rev) as tablet_rev, sum(TV_rev) as TV_rev, sum(PC_rev) as PC_rev, sum(other_rev) as other_rev, sum(phone_imp) as phone_imp, sum(tablet_imp) as tablet_imp, sum(TV_imp) as TV_imp, sum(PC_imp) as PC_imp, sum(other_imp) as other_imp, sum(phone_cost) as phone_cost, sum(tablet_cost) as tablet_cost, sum(TV_cost) as TV_cost, sum(PC_cost) as PC_cost, sum(other_cost) as other_cost ,sum(phone_clicks) as phone_clicks, sum(tablet_clicks) as tablet_clicks, sum(TV_clicks) as TV_clicks, sum(PC_clicks) as PC_clicks, sum(other_clicks) as other_clicks from user_exposure group by user_id ,campaign, Advertiser) SELECT Advertiser,campaign, BUILT_IN_PARAMETER('TIME_WINDOW_START') AS time_window_start, BUILT_IN_PARAMETER('TIME_WINDOW_END') AS time_window_end ,CASE WHEN (phone_imp > 0 OR phone_purch > 0) AND tablet_imp = 0 AND tablet_purch = 0 AND PC_imp = 0 AND PC_purch = 0 AND TV_imp = 0 AND TV_purch = 0 AND other_imp = 0 AND other_purch = 0 THEN 'phone_only' WHEN phone_imp = 0 AND phone_purch = 0 AND (tablet_imp > 0 OR tablet_purch > 0) AND PC_imp = 0 AND PC_purch = 0 AND TV_imp = 0 AND TV_purch = 0 AND other_imp = 0 AND other_purch = 0 THEN 'tablet_only' WHEN phone_imp = 0 AND phone_purch = 0 AND tablet_imp = 0 AND tablet_purch = 0 AND (PC_imp > 0 OR PC_purch > 0) AND TV_imp = 0 AND TV_purch = 0 AND other_imp = 0 AND other_purch = 0 THEN 'PC_only' WHEN phone_imp = 0 AND phone_purch = 0 AND tablet_imp = 0 AND tablet_purch = 0 AND PC_imp = 0 AND PC_purch = 0 AND (TV_imp > 0 OR TV_purch > 0) AND other_imp = 0 AND other_purch = 0 THEN 'TV_only' WHEN (phone_imp > 0 OR phone_purch > 0) AND tablet_imp = 0 AND tablet_purch = 0 AND PC_imp = 0 AND PC_purch = 0 AND (TV_imp > 0 OR TV_purch > 0) AND other_imp = 0 AND other_purch = 0 THEN 'Phone_and_TV' WHEN phone_imp = 0 AND phone_purch = 0 AND tablet_imp = 0 AND tablet_purch = 0 AND (PC_imp > 0 OR PC_purch > 0) AND (TV_imp > 0 OR TV_purch > 0) AND other_imp = 0 AND other_purch = 0 THEN 'PC_and_TV' WHEN phone_imp = 0 AND phone_purch = 0 AND (tablet_imp > 0 OR tablet_purch > 0) AND PC_imp = 0 AND PC_purch = 0 AND (TV_imp > 0 OR TV_purch > 0) AND other_imp = 0 AND other_purch = 0 THEN 'Tablet_and_TV' WHEN (phone_imp > 0 OR phone_purch > 0) AND tablet_imp = 0 AND tablet_purch = 0 AND (PC_imp > 0 OR PC_purch > 0) AND TV_imp = 0 AND TV_purch = 0 AND other_imp = 0 AND other_purch = 0 THEN 'PC_and_Phone' WHEN (phone_imp > 0 OR phone_purch > 0) AND (tablet_imp > 0 OR tablet_purch > 0) AND PC_imp = 0 AND PC_purch = 0 AND TV_imp = 0 AND TV_purch = 0 AND other_imp = 0 AND other_purch = 0 THEN 'Tablet_and_Phone' WHEN phone_imp = 0 AND phone_purch = 0 AND (tablet_imp > 0 OR tablet_purch > 0) AND (PC_imp > 0 OR PC_purch > 0) AND TV_imp = 0 AND TV_purch = 0 AND other_imp = 0 AND other_purch = 0 THEN 'PC_and_Tablet' WHEN (phone_imp > 0 OR phone_purch > 0) AND tablet_imp = 0 AND tablet_purch = 0 AND (PC_imp > 0 OR PC_purch > 0) AND (TV_imp > 0 OR TV_purch > 0) AND other_imp = 0 AND other_purch = 0 THEN 'Phone_and_TV_and_PC' WHEN (phone_imp > 0 OR phone_purch > 0) AND (tablet_imp > 0 OR tablet_purch > 0) AND PC_imp = 0 AND PC_purch = 0 AND (TV_imp > 0 OR TV_purch > 0) AND other_imp = 0 AND other_purch = 0 THEN 'Phone_and_TV_and_Tablet' WHEN phone_imp = 0 AND phone_purch = 0 AND (tablet_imp > 0 OR tablet_purch > 0) AND (PC_imp > 0 OR PC_purch > 0) AND (TV_imp > 0 OR TV_purch > 0) AND other_imp = 0 AND other_purch = 0 THEN 'PC_and_TV_and_Tablet' WHEN (phone_imp > 0 OR phone_purch > 0) AND (tablet_imp > 0 OR tablet_purch > 0) AND (PC_imp > 0 OR PC_purch > 0) AND TV_imp = 0 AND TV_purch = 0 AND other_imp = 0 AND other_purch = 0 THEN 'Phone_and_PC_and_Tablet' WHEN (phone_imp > 0 OR phone_purch > 0) AND (tablet_imp > 0 OR tablet_purch > 0) AND (PC_imp > 0 OR PC_purch > 0) AND (TV_imp > 0 OR TV_purch > 0) AND other_imp = 0 AND other_purch = 0 THEN 'PC_and_TV_and_Tablet_and_Phone' ELSE 'NA' END as exposure_group, SUM(phone_imp) as phone_impressions, SUM(tablet_imp) as tablet_impressions, SUM(TV_imp) as TV_impressions, SUM(PC_imp) as PC_impressions, SUM(other_imp) as other_impressions, (SUM(phone_imp)+SUM(tablet_imp)+SUM(TV_imp)+SUM(PC_imp)+SUM(other_imp)) as exposure_group_imp, SUM(phone_cost)/100000 as phone_cost, SUM(tablet_cost)/100000 as tablet_cost, SUM(TV_cost)/100000 as TV_cost, SUM(PC_cost)/100000 as PC_cost, SUM(other_cost)/100000 as other_cost, ((SUM(phone_cost)+SUM(tablet_cost)+SUM(TV_cost)+SUM(PC_cost)+SUM(other_cost))/100000) as exposure_group_cost, SUM(phone_clicks) as phone_clicks, SUM(tablet_clicks) as tablet_clicks, SUM(TV_clicks) as TV_clicks, SUM(PC_clicks) as PC_clicks, SUM(other_clicks) as other_clicks, ((SUM(phone_clicks)+SUM(tablet_clicks)+SUM(TV_clicks)+SUM(PC_clicks)+SUM(other_clicks))) as exposure_group_clicks, SUM(phone_purch) as phone_purchases, SUM(tablet_purch) as tablet_purchases, SUM(TV_purch) as TV_purchases, SUM(PC_purch) as PC_purchases, SUM(other_purch) as other_purchases, (SUM(phone_purch)+SUM(tablet_purch)+SUM(TV_purch)+SUM(PC_purch)+SUM(other_purch)) as exposure_group_purchases, SUM(phone_rev) as phone_revenue, SUM(tablet_rev) as tablet_revenue, SUM(TV_rev) as TV_revenue, SUM(PC_rev) as PC_revenue, SUM(other_rev) as other_revenue, (SUM(phone_rev)+SUM(tablet_rev)+SUM(TV_rev)+SUM(PC_rev)+SUM(other_rev)) as exposure_group_revenue, SUM(phone_rev)/(SUM(phone_cost)/100000) as phone_roas, SUM(tablet_rev)/(SUM(tablet_cost)/100000) as tablet_roas, SUM(TV_rev)/(SUM(TV_cost)/100000) as TV_roas, SUM(PC_rev)/(SUM(PC_cost)/100000) as PC_roas, SUM(other_rev)/(SUM(other_cost)/100000) as Other_roas, (SUM(phone_rev)+SUM(tablet_rev)+SUM(TV_rev)+SUM(PC_rev)+SUM(other_rev))/((SUM(phone_cost)+SUM(tablet_cost) +SUM(TV_cost)+SUM(PC_cost)+SUM(other_cost))/100000) as exposure_group_roas FROM aggregated GROUP BY exposure_group, campaign, Advertiser"
    },
    "workflowMetaData": {
      "M": {
        "endemicType": {
          "S": "ENDEMIC"
        },
        "automaticDeployWorkflow": {
          "BOOL": true
        }
      }
    },
    "filteredMetricsDiscriminatorColumn": {
      "S": "filtered"
    },
    "version": {
      "N": "1"
    },
    "workflowType": {
      "S": "ENDEMIC|NON-ENDEMIC"
    },
    "workflowId": {
      "S": "exposure_group_analysis"
    },
    "defaultSchedule": {
      "M": {
        "automaticDeploySchedule": {
          "BOOL": false
        },
        "Description": {
          "S": "Runs the exposure_group_analysisn workflow at 11:00 GMT / 9:00am EST daily. "
        },
        "Input": {
          "M": {
            "payload": {
              "M": {
                "timeWindowEnd": {
                  "S": "today(-2)"
                },
                "timeWindowStart": {
                  "S": "today(-3)"
                },
                "timeWindowType": {
                  "S": "EXPLICIT"
                },
                "workflow_executed_date": {
                  "S": "now()"
                }
              }
            }
          }
        },
        "Name": {
          "S": "exposure_group_analysis_daily"
        },
        "ScheduleExpression": {
          "S": "custom(D * 11)"
        },
        "State": {
          "S": "ENABLED"
        }
      }
    }
  },
  "3": {
    "sqlQuery": {
      "S": "With IMPCLICK as ( SELECT A.ADVERTISER,  A.CAMPAIGN, SUM(A.total_cost/100000) as TOTAL_COST, SUM(A.IMPRESSIONS) AS IMPRESSIONS, SUM(B.clicks) as CLICKS, A.USER_ID FROM display_impressions A LEFT JOIN DISPLAY_CLICKS B ON A.request_tag = B.request_tag GROUP BY A.ADVERTISER, A.CAMPAIGN, A.USER_ID), CONV AS (SELECT c.advertiser, c.user_id, c.campaign, SUM(c.conversions) as conversions, SUM(c.total_product_sales) AS total_product_sales, SUM(c.product_sales) AS product_sales, sum(c.total_purchases) as total_purchases , sum(c.purchases) as purchases FROM amazon_attributed_events_by_conversion_time c WHERE c.conversion_event_subtype = 'order' GROUP BY c.advertiser, c.user_id,c.campaign), combined as (SELECT d.advertiser, d.campaign, sum(d.impressions) as impressions, sum(c.conversions) as conversions, COUNT(DISTINCT d.user_id) AS users_in_bucket, sum(c.total_product_sales) as total_product_sales, sum(c.product_sales) as product_Sales, sum(d.TOTAL_COST) as total_cost, ROUND(sum(d.total_cost)/sum(c.total_purchases),2) AS CPA_Total_Purchases, ROUND(sum(d.total_cost)/sum(c.purchases),2) AS CPA_Purchases, ROUND(sum(c.total_product_sales)/sum(d.total_cost),2) as ROAS_Totalproductsales, sum(d.impressions)/COUNT(DISTINCT d.user_id) as freq, sum(c.total_purchases)/COUNT(DISTINCT d.user_id) as conversion_rate_total_purchases, sum(c.purchases)/COUNT(DISTINCT d.user_id) as conversion_rate_purchases, ROUND(sum(c.product_sales)/sum(d.total_cost),2) as ROAS_Productsales , sum(d.clicks) as Clicks, BUILT_IN_PARAMETER('TIME_WINDOW_START') AS time_window_start, BUILT_IN_PARAMETER('TIME_WINDOW_END') AS time_window_end , sum(total_purchases) as total_purchases ,sum(purchases) as purchases FROM IMPCLICK d LEFT JOIN CONV c on d.advertiser = c.advertiser and d.campaign = c.campaign and d.user_id =c.user_id WHERE d.USER_ID IS NOT NULL GROUP BY d.advertiser, d.campaign), CONVERTED_brand AS ( SELECT distinct user_id FROM amazon_attributed_events_by_conversion_time WHERE conversion_event_subtype = 'order' ), CONVERTED AS ( SELECT distinct user_id FROM amazon_attributed_events_by_conversion_time WHERE conversion_event_subtype = 'order' and purchases >= 1 ), conv_freq_brand as ( SELECT a.advertiser,a.CAMPAIGN, SUM(A.IMPRESSIONS)/COUNT(DISTINCT B.USER_ID) AS conv_FREQUENCY_brand FROM DISPLAY_IMPRESSIONS A INNER JOIN CONVERTED_brand B ON A.USER_ID = B.USER_ID WHERE A.USER_ID IS NOT NULL GROUP BY a.advertiser,A.CAMPAIGN) , conv_freq as ( SELECT a.advertiser,a.CAMPAIGN, SUM(A.IMPRESSIONS)/COUNT(DISTINCT B.USER_ID) AS conv_FREQUENCY FROM DISPLAY_IMPRESSIONS A INNER JOIN CONVERTED B ON A.USER_ID = B.USER_ID WHERE A.USER_ID IS NOT NULL GROUP BY a.advertiser,A.CAMPAIGN) SELECT a.advertiser,a.campaign, a.impressions,users_in_bucket,Clicks, total_cost ,conversions,a.conversion_rate_purchases, a.conversion_rate_total_purchases, a.CPA_Purchases,a.CPA_Total_Purchases, t2.avgfreq,t2.avgconvfreq,t2.avgconvfrequency_brand,total_product_sales,(ROAS_Totalproductsales) as roastotalproductsales, (product_sales) as productsales,(ROAS_Productsales) as roasproductsales, (total_purchases) as totalpurchases, purchases, BUILT_IN_PARAMETER('TIME_WINDOW_START') AS time_window_start, BUILT_IN_PARAMETER('TIME_WINDOW_END') AS time_window_end FROM combined a LEFT JOIN ( SELECT a.campaign, round(avg(freq) ,2) as avgfreq, round(avg(conv_FREQUENCY) ,2) as avgconvfreq, round(avg(conv_FREQUENCY_brand) ,2) as avgconvfrequency_brand FROM combined a left join conv_freq_brand b on a.advertiser=b.advertiser and a.CAMPAIGN =b.CAMPAIGN left join conv_freq c on a.advertiser=c.advertiser and a.CAMPAIGN =c.CAMPAIGN GROUP BY a.advertiser,a.campaign ) t2 ON a.campaign = t2.campaign"
    },
    "workflowMetaData": {
      "M": {
        "endemicType": {
          "S": "ENDEMIC"
        },
        "automaticDeployWorkflow": {
          "BOOL": true
        }
      }
    },
    "filteredMetricsDiscriminatorColumn": {
      "S": "filtered"
    },
    "version": {
      "N": "1"
    },
    "workflowType": {
      "S": "ENDEMIC|NON-ENDEMIC"
    },
    "workflowId": {
      "S": "Avg-frequency-roas-by-campaignNEW"
    },
    "defaultSchedule": {
      "M": {
        "automaticDeploySchedule": {
          "BOOL": true
        },
        "Description": {
          "S": "Runs the Avg-frequency-roas-by-campaignNEW at 11:00 PM EST daily with 14 day lookback"
        },
        "Input": {
          "M": {
            "payload": {
              "M": {
                "timeWindowEnd": {
                  "S": "today(-1)"
                },
                "timeWindowStart": {
                  "S": "today(-15)"
                },
                "timeWindowType": {
                  "S": "EXPLICIT"
                },
                "workflow_executed_date": {
                  "S": "now()"
                }
              }
            }
          }
        },
        "Name": {
          "S": "Avg-frequency-roas-by-campaign"
        },
        "ScheduleExpression": {
          "S": "custom(D * 3)"
        },
        "State": {
          "S": "ENABLED"
        }
      }
    }
  },
  "4": {
    "sqlQuery": {
      "S": "WITH ranked AS ( SELECT NAMED_ROW('device', a.device_type) AS device,   a.user_id FROM display_impressions a where user_id is not null), assembled AS ( SELECT ARRAY_SORT(COLLECT(distinct a.device)) AS path, a.user_id FROM ranked a GROUP BY a.user_id ), impressions as ( select user_id, sum(impressions) as impressions, sum(total_cost) as total_cost from display_impressions group by user_id ), clicks as ( select user_id, sum(clicks) as clicks from display_clicks group by user_id ), converted as ( select user_id, sum(product_sales) as product_sales, sum(purchases) as purchases, sum(total_product_sales) as total_product_sales from amazon_attributed_events_by_traffic_time where conversion_event_subtype = 'order' and user_id is not null group by user_id ), assembled_with_imp_conv AS ( SELECT path, count(distinct a.user_id) as reach, sum(b.impressions) as impressions, sum(b.total_cost)/100000 as imp_total_cost, SUM(cl.CLICKS) AS TOTAL_CLICKS, count(distinct c.user_id) as conversions, sum(c.product_sales) as sales_amount, sum(c.purchases) as purchases, sum(c.total_product_sales) as sales_amount_brand FROM assembled a left join impressions b on a.user_id = b.user_id LEFT JOIN clicks cl ON a.user_id = cl.user_id left join converted c on a.user_id = c.user_id GROUP BY path) SELECT path, reach AS path_occurrences, impressions, imp_total_cost, conversions, sales_amount, sales_amount_brand, purchases, (purchases/reach) as conversion_rate_perc_target, (conversions/reach) as conversion_rate_perc_all, TOTAL_CLICKS, (sales_amount_brand/imp_total_cost) as ROAS_sales_amount_brand , (sales_amount/imp_total_cost) as ROAS_sales_amount, BUILT_IN_PARAMETER('TIME_WINDOW_START') AS time_window_start, BUILT_IN_PARAMETER('TIME_WINDOW_END') AS time_window_end FROM assembled_with_imp_conv"
    },
    "workflowMetaData": {
      "M": {
        "endemicType": {
          "S": "ENDEMIC"
        },
        "automaticDeployWorkflow": {
          "BOOL": true
        }
      }
    },
    "filteredMetricsDiscriminatorColumn": {
      "S": "filtered"
    },
    "version": {
      "N": "1"
    },
    "workflowType": {
      "S": "ENDEMIC|NON-ENDEMIC"
    },
    "workflowId": {
      "S": "path_to_conversion"
    },
    "defaultSchedule": {
      "M": {
        "automaticDeploySchedule": {
          "BOOL": false
        },
        "Description": {
          "S": "Runs the path_to_conversion workflow at 12:00 GMT / 10:00am EST daily. "
        },
        "Input": {
          "M": {
            "payload": {
              "M": {
                "timeWindowEnd": {
                  "S": "today(-2)"
                },
                "timeWindowStart": {
                  "S": "today(-3)"
                },
                "timeWindowType": {
                  "S": "EXPLICIT"
                },
                "workflow_executed_date": {
                  "S": "now()"
                }
              }
            }
          }
        },
        "Name": {
          "S": "path_to_conversion"
        },
        "ScheduleExpression": {
          "S": "custom(D * 12)"
        },
        "State": {
          "S": "ENABLED"
        }
      }
    }
  }
}