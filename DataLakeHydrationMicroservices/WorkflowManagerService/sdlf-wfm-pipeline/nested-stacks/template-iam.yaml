AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Contains all the resources necessary for the wofkflow management microservice"

Parameters:
  pTeamName:
    Type: String
    AllowedPattern: '[a-z0-9]{2,10}'
  pMicroserviceName:
    Type: String
    AllowedPattern: '[a-z0-9]{2,12}'
  pEnvironment:
    Type: String
    AllowedValues: ["dev", "test", "prod"]
  pAnalyticsBucketARN:
    Type: "String"
  pAMCGlueDataCatalogName:
    Type: "String"
  pStagingBucketARN:
    Type: "String"
  pPipelineName:
    Type: String
    AllowedPattern: '[a-z0-9]{2,10}'
  pDynamoDBCustomerConfig:
    Type: String
  pDynamoDBCustomerConfigStreamArn:
    Type: String
  pDynamoDBAMCExecutionStatus:
    Type: String
  pDynamoDBAMCExecutionStatusStreamArn:
    Type: String
  pDynamoDBAMCWorkflows:
    Type: String
  pDynamoDBAMCWorkflowsStreamArn:
    Type: String
  pDynamoDBAMCWorkflowSchedules:
    Type: String
  pDynamoDBAMCWorkflowSchedulesStreamArn:
    Type: String
  pAthenaWorkGroup:
    Type: String
  pAthenaWorkGroupS3OutputLocation:
    Type: String
  pAthenaResultsS3BucketName:
    Type: String
  pSnsTopic:
    Type: String
  # pCustomerConfigQueue:
  #   Type: String
  # pWorkflowLibraryQueue:
  #   Type: String
  pSNSSQSKey:
    Type: String
  pDynamoDBAMCWorkflowLibrary:
    Type: String
  pDynamoDBAMCWorkflowLibraryStreamArn:
    Type: String
  pTPSIntegrationKMSKeyARN:
    Type: String
  pWLSIntegrationKMSKeyARN:
    Type: String
Resources:

######## IAM Policies ##########

### Athena Policies ###
## IAM Policy Athena Allow Workgroup Access ###
  rPolicyAthenaWorkgroupAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows access to Athena Workgroups"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}", "WFM", "Athena", "WorkgroupAccess"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "athena:GetNamedQuery"
              - "athena:CancelQueryExecution"
              - "athena:StartQueryExecution"
              - "athena:StopQueryExecution"
              - "athena:GetWorkGroup"
              - "athena:GetQueryResults"
              - "athena:GetQueryExecution"
              - "athena:BatchGetQueryExecution"
              - "athena:ListQueryExecutions"
              - "athena:GetQueryResultsStream"
            Resource:
              - !Sub "arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${pAthenaWorkGroup}"

### Glue Policies #####
### Allow AMC Glue Catalog Access  ###
  rPolicyGlueCatalogAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows access to Athena Workgroups"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "WFM", "Glue", "CatalogAccess"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "glue:Get*"
            Resource:
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          - Effect: Allow
            Action:
              - "glue:Get*"
              - "glue:List*"
            Resource:
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${pAMCGlueDataCatalogName}"
              - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${pAMCGlueDataCatalogName}/*"

## SQS Policies ##
## Execution Queue Read Write Policy ##
  rPolicySNSAMCExecutionQueueRW:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows access to Read and write to the AMC Workflow Execution SQS Queue"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "SQS", "ExecutionQueue", "RW"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "sqs:List*"
              - "sqs:ReceiveMessage"
              - "sqs:SendMessage*"
              - "sqs:DeleteMessage*"
              - "sqs:GetQueue*"
            Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${pMicroserviceName}-${pTeamName}-${pPipelineName}-${pEnvironment}-workflowExecution*"

## Customer Config Queue Read Write Policy ##
  # rPolicySNSCustomerConfigQueueRW:
  #   Type: "AWS::IAM::ManagedPolicy"
  #   Properties:
  #     Description: !Sub "Allows access to Read and write to the Customer Config SQS Queue"
  #     ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "SQS", "CustomerConfigQueue", "RW"]]
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - "sqs:List*"
  #             - "sqs:ReceiveMessage"
  #             - "sqs:SendMessage*"
  #             - "sqs:DeleteMessage*"
  #             - "sqs:GetQueue*"
  #           Resource:
  #             - !Ref pCustomerConfigQueue


## Workflow Library Queue Read Write Policy ##
  # rPolicySNSWorkflowLibraryQueueRW:
  #   Type: "AWS::IAM::ManagedPolicy"
  #   Properties:
  #     Description: !Sub "Allows access to Read and write to the Workflow Library SQS Queue"
  #     ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "SQS", "WorkflowLibrary", "RW"]]
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - "sqs:List*"
  #             - "sqs:ReceiveMessage"
  #             - "sqs:SendMessage*"
  #             - "sqs:DeleteMessage*"
  #             - "sqs:GetQueue*"
  #           Resource:
  #             - !Ref pWorkflowLibraryQueue

### S3 Policies ###
### IAM Policy AthenaS3Results###
  rPolicyAthenaS3Results:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows access to Athena Workgroups"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "WFM", "S3", "AthenaResults"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:AbortMultipartUpload"
              - "s3:ListMultipartUploadParts"
              - "s3:Get*"
              - "s3:List*"
            Resource:
              - !Sub "arn:aws:s3:::${pAthenaResultsS3BucketName}/${pMicroserviceName}-${pTeamName}-${pEnvironment}-athenaresults/*"
          - Effect: Allow
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
            Resource:
              - !Sub "arn:aws:s3:::${pAthenaResultsS3BucketName}"

### KMS Policies ###
### DecryptSNSSQSKey ###
  rPolicyDecryptSNSSQSKey:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows using the SNSSQS KMS Key for Decryption"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Workflowmgr", "KMS", "DecryptSNSSQS"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "kms:DescribeKey"
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:CreateGrant"
            Resource:
              - !Ref pSNSSQSKey
              - !Ref pTPSIntegrationKMSKeyARN
              - !Ref pWLSIntegrationKMSKeyARN

### IAM Policies IAM ###
## Modify AMC API Invoke Policy ##
  rPolicyModifyAMCAPIInvokeIAMPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows updating the ModifyAMCAPIInvokeIAMPolicy policy"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Workflowmgr", "DynamoDB", "ModifyAMCAPIInvokeIAMPolicy"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "iam:GetPolicyVersion"
              - "iam:GetPolicy"
              - "iam:ListPolicyVersions"
              - "iam:CreatePolicyVersion"
              - "iam:DeletePolicyVersion"
            Resource:
              - !Ref rAPIGatewayInvokeAMCApiPolicy

### API Gateway Policies ##
##IAM Policy InvokeAMCApi ###
  rAPIGatewayInvokeAMCApiPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows API Invoke on the AMC API Endpoints"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "ApiGateway", "AMCAPIInvoke"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "execute-api:Invoke"
            Resource:
              - !Join ['', ["arn:aws:execute-api:",  'placeholder', !Sub ":${AWS::AccountId}:", 'placeholder', "/*"]]


### Lakeformation Policies ##
##Lakeformation GetDate policy ###
  rPolicyLakeFormationGetDataAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows API Invoke on the AMC API Endpoints"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "LakeFormation", "GetDataAccess"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "lakeformation:GetDataAccess"
            Resource:
              - "*"

### Lambda Policies ##
##IAM Policy Invoke ExecutionQueueProducer ###
  rPolicyInvokeExecutionQueueProducer:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows API Invoke on the AMC API Endpoints"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Lambda", "ExecutionQueueProducerInvoke"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMicroserviceName}-${pTeamName}-${pPipelineName}-ExecutionQueueProducer"

##Invoke AMC API Interface##
  rPolicyInvokeAMCApiInterface:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows API Invoke on the AMC API Lambda"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Lambda", "AMCApiInterfaceInvoke"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMicroserviceName}-${pTeamName}-${pPipelineName}-AmcApiInterface"

##Invoke rPolicyInvokeWorkflowExecutionQueueConsumer##
  rPolicyInvokeWorkflowExecutionQueueConsumer:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows API Invoke on the AMC API Lambda"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Lambda", "WorkflowExecutionProducerInvoke"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMicroserviceName}-${pTeamName}-${pPipelineName}-WorkflowExecutionQueueConsumer"

##Invoke AMC API Interface##
  rPolicyInvokeSyncWorkflowStatuses:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows Invoke on SyncWorkflow Statuses"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Lambda", "SyncWorkflowStatuses", "invoke"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMicroserviceName}-${pTeamName}-${pPipelineName}-SyncWorkflowStatuses"

##Update Lambda Permissions Policy##
  rPolicyLambdaPermissionsRW:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows API Invoke on the AMC API Lambda"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Lambda", "permissions"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "lambda:AddPermission"
              - "lambda:RemovePermission"
              - "lambda:GetPolicy"
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMicroserviceName}-*"

  ### SNS Policies ###
##Publish to SNS ##
  rSnsPublishPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows API Invoke on the AMC API Endpoints"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "WFM", "SNSPublish"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
            Resource:
              - !Ref pSnsTopic

### DynamoDB Policies ##
##Read AMC Execution Status DynamoDB ###
  rPolicyReadAMCExecutionStatusDynamoDB:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows API Invoke on the AMC API Endpoints"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "WFM", "DynamoDB", "ReadExecutionStatus"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:ListTables"
              - "dynamodb:ListGlobalTables"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:GetRecords"
              - "dynamodb:GetShardIterator"
              - "dynamodb:DescribeStream"
              - "dynamodb:ListStreams"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCExecutionStatus}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCExecutionStatus}/*"

##IAM Policy Write Execution Status DynamoDB ##
  rPolicyWriteAMCExecutionStatusDynamoDB:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows Read and write access to the AMC Executions Status DynamoDB Table"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Workflowmgr", "DynamoDB", "WriteExecutionStatus"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:ListTables"
              - "dynamodb:ListGlobalTables"
              - "dynamodb:DescribeTable"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCExecutionStatus}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCExecutionStatus}/*"


##IAM Policy Read Workflows ##
  rPolicyReadAMCWorkflowsDynamoDB:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows Read and write access to the AMC Executions Status DynamoDB Table"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}", "DynamoDB", "AMCWorkflows", "Read"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:ListTables"
              - "dynamodb:ListGlobalTables"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:GetRecords"
              - "dynamodb:GetShardIterator"
              - "dynamodb:DescribeStream"
              - "dynamodb:ListStreams"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCWorkflows}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCWorkflows}/*"


##IAM Policy Write Customer Config ##
  rPolicyDynamoDBCustomerConfigRW:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: !Sub "Allows Read and write access to the AMC Executions Status DynamoDB Table"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}", "DynamoDB", "CustomerConfig", "RW"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:ListTables"
              - "dynamodb:ListGlobalTables"
              - "dynamodb:DescribeTable"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:DeleteItem"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBCustomerConfig}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBCustomerConfig}/*"

### IAM Policy ReadCustomerConfig DynamoDB ###
  rPolicyReadCustomerConfigDynamoDB:
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      Description: !Sub "Allows Read, Scan and query access on the Customer Config DynamoDB Table"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}",  "Workflowmgr", "DynamoDB", "ReadCustomerConfig"]]      
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:ListTables"
              - "dynamodb:ListGlobalTables"
              - "dynamodb:Query"
              - "dynamodb:Scan"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBCustomerConfig}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBCustomerConfig}/*"



### IAM Policy WriteWorkflowandWorkflowSchedules ###
  rPolicyWriteWorkflowandWorkflowSchedulesDynamoDB:
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      Description: !Sub "Allows Write access to the Workflows and Workflow Schedules  DynamoDB Tables"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}", "WorkflowLibraryQueueConsumer", "DynamoDB", "WorkflowandWorkflowSchedules", "Write"]]     
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:ListTables"
              - "dynamodb:ListGlobalTables"
              - "dynamodb:DescribeTable"
              - "dynamodb:DescribeStream"
              - "dynamodb:GetRecords"
              - "dynamodb:GetShardIterator"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:DeleteItem"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCWorkflows}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCWorkflows}/*"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCWorkflowSchedules}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCWorkflowSchedules}/*"

### IAM Policy WriteWorkflowandWorkflowSchedules ###
  rPolicyWriteWorkflowLibraryDynamoDB:
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      Description: !Sub "Allows Write access to the WorkflowLibrary DynamoDB Table"
      ManagedPolicyName: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName, !Sub "${AWS::Region}", "DynamoDB", "WriteWorkflowLibrary", "Write"]]     
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:ListTables"
              - "dynamodb:ListGlobalTables"
              - "dynamodb:DescribeTable"
              - "dynamodb:DescribeStream"
              - "dynamodb:GetRecords"
              - "dynamodb:GetShardIterator"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:DeleteItem"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCWorkflowLibrary}"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pDynamoDBAMCWorkflowLibrary}/*"


######## IAM Roles ##########
## IAM Role WorkflowScheduleTrigger ##
##TODO: Change AmazonEventBridgeFullAccess to create and update only workflow schedule related rules
  rRoleLambdaWorkflowScheduleTrigger:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the WorkflowScheduleTrigger Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess"
        - !Ref rPolicyWriteWorkflowandWorkflowSchedulesDynamoDB
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rPolicyWriteAMCExecutionStatusDynamoDB
        - !Ref rPolicyLambdaPermissionsRW
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
## IAM Role CustomerConfigTrigger ##
##TODO: Change from full access to narrow scope to necesary permissions
  rRoleLambdaCustomerConfigTrigger:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the CustomerConfigTrigger Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rPolicyModifyAMCAPIInvokeIAMPolicy
        - !Ref rPolicyDecryptSNSSQSKey
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
      Policies:
        - PolicyName: !Join [ '-', [ !Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "customerConfigTrigger", "workflowLibraryTrigger", "invoke" ] ]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${pMicroserviceName}-${pTeamName}-${pPipelineName}-WorkflowLibraryTrigger"
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]

## IAM Role Workflow Library Trigger ##
  rRoleLambdaWorkflowLibraryTrigger:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the WorkflowLibraryTrigger Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess"
        - !Ref rPolicyWriteWorkflowLibraryDynamoDB
        - !Ref rPolicyWriteWorkflowandWorkflowSchedulesDynamoDB
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]

## IAM Role AmcApiInterface ##
  rRoleLambdaAmcApiInterface:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the AmcApiInterface Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rAPIGatewayInvokeAMCApiPolicy
        - !Ref rPolicyWriteAMCExecutionStatusDynamoDB
        - !Ref rPolicyInvokeSyncWorkflowStatuses
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]

## IAM Role CustomerConfigQueueConsumer ##
  rRoleLambdaCustomerConfigQueueConsumer:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the CustomerConfigQueueConsumer Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyDecryptSNSSQSKey
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyDynamoDBCustomerConfigRW
        # - !Ref rPolicySNSCustomerConfigQueueRW
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]

##IAM Role WorkflowLibraryQueueConsumer##
  rRoleLambdaWorkflowLibraryQueueConsumer:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the WorkflowLibraryQueueConsumer Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyDecryptSNSSQSKey
        - !Ref rPolicyWriteWorkflowLibraryDynamoDB
        # - !Ref rPolicySNSWorkflowLibraryQueueRW
        - !Ref rSnsPublishPolicy
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
## IAM Role SyncWorkflowStatuses ##
  rRoleLambdaSyncWorkflowStatuses:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the SyncWorkflowStatuses Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rAPIGatewayInvokeAMCApiPolicy
        - !Ref rPolicyDynamoDBCustomerConfigRW
        - !Ref rPolicyWriteAMCExecutionStatusDynamoDB
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]

## IAM Role WorkflowStatusTrigger ##
  rRoleLambdaWorkflowStatusTrigger:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the LambdaWorkflowStatusTrigger Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyReadAMCExecutionStatusDynamoDB
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
## IAM Role WorkflowTableTrigger ##
  rRoleLambdaWorkflowTableTrigger:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the WorkflowTableTrigger Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyInvokeAMCApiInterface
        - !Ref rPolicyReadAMCWorkflowsDynamoDB
        - !Ref rPolicyDecryptSNSSQSKey

      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
## IAM Role EventQueueConsumer ##
  rRoleLambdaGenerateExecutionResubmissions:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the GenerateExecutionResubmissions Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyReadAMCExecutionStatusDynamoDB
        - !Ref rPolicySNSAMCExecutionQueueRW
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
## IAM Role EventQueueConsumer ##
  rRoleLambdaEventQueueConsumer:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the LambdaEventQueueConsumer Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rAPIGatewayInvokeAMCApiPolicy
        - !Ref rPolicyWriteAMCExecutionStatusDynamoDB
        - !Ref rPolicySNSAMCExecutionQueueRW
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyInvokeWorkflowExecutionQueueConsumer
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
## IAM Role EventQueueProducer ##
  rRoleLambdaEventQueueProducer:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the EventQueueProducer Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rSnsPublishPolicy
        - !Ref rPolicySNSAMCExecutionQueueRW
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
## IAM Role RunWorkFlowByCampaign ##
  rRoleLambdaRunWorkFlowByCampaign:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the RunWorkFlowByCampaign Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyReadCustomerConfigDynamoDB
        - !Ref rPolicyAthenaS3Results
        - !Ref rPolicyGlueCatalogAccess
        - !Ref rPolicyAthenaWorkgroupAccess
        - !Ref rPolicyInvokeExecutionQueueProducer
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyLakeFormationGetDataAccess
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
          
  # IAM Role pRoleLambdaAmcWorkflowScheduler
  rRoleLambdaCustomScheduler:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "Role for the CustomScheduler Lambda for ${pMicroserviceName} ${pTeamName} ${pEnvironment} "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Ref rPolicyWriteWorkflowandWorkflowSchedulesDynamoDB
        - !Ref rPolicyInvokeExecutionQueueProducer
        - !Ref rSnsPublishPolicy
        - !Ref rPolicyDecryptSNSSQSKey
      Tags:
        -
          Key: 'tagging-policy'
          Value: !Join ['-', [!Ref pMicroserviceName, !Ref pTeamName, !Ref pPipelineName,  "common"]]
          
Outputs:
  oAPIGatewayInvokeAMCApiPolicy:
    Value: !Ref rAPIGatewayInvokeAMCApiPolicy
  oRoleLambdaAmcApiInterface:
    Value: !GetAtt rRoleLambdaAmcApiInterface.Arn
  oRoleLambdaSyncWorkflowStatuses:
    Value: !GetAtt rRoleLambdaSyncWorkflowStatuses.Arn
  oRoleLambdaWorkflowStatusTrigger:
    Value: !GetAtt rRoleLambdaWorkflowStatusTrigger.Arn
  oRoleLambdaWorkflowTableTrigger:
    Value: !GetAtt rRoleLambdaWorkflowTableTrigger.Arn
  oRoleLambdaEventQueueConsumer:
    Value: !GetAtt rRoleLambdaEventQueueConsumer.Arn
  oRoleLambdaEventQueueProducer:
    Value: !GetAtt rRoleLambdaEventQueueProducer.Arn
  oRoleLambdaRunWorkFlowByCampaign:
    Value: !GetAtt rRoleLambdaRunWorkFlowByCampaign.Arn
  oRoleLambdaWorkflowScheduleTrigger:
    Value: !GetAtt rRoleLambdaWorkflowScheduleTrigger.Arn
  oRoleLambdaCustomerConfigTrigger:
    Value: !GetAtt rRoleLambdaCustomerConfigTrigger.Arn
  oRoleLambdaCustomerConfigQueueConsumer:
    Value: !GetAtt rRoleLambdaCustomerConfigQueueConsumer.Arn
  oRoleLambdaWorkflowLibraryQueueConsumer:
    Value: !GetAtt rRoleLambdaWorkflowLibraryQueueConsumer.Arn
  oRoleLambdaWorkflowLibraryTrigger:
    Value: !GetAtt rRoleLambdaWorkflowLibraryTrigger.Arn
  oRoleLambdaGenerateExecutionResubmissions:
    Value: !GetAtt rRoleLambdaGenerateExecutionResubmissions.Arn
  oRoleLambdaCustomScheduler:
    Value: !GetAtt rRoleLambdaCustomScheduler.Arn
